@page "/Selection"

@using Syncfusion.Blazor.Diagrams.Wasm
@using System.Collections.ObjectModel


<style>
    #diagram-space {
        width: 70%;
        float: left;
    }

    #properties {
        width: 25%;
        float: right;
    }
</style>

<div id="diagram-space">
    <SfDiagramWasm @ref="diagram" ID="diagram" Width="100%" Height="500px" Nodes="@nodes" Connectors="@connectors">
        @*<SnapSettings GridType="@GridType.Lines"></SnapSettings>
        <ScrollSettings @ref="@ScrollSettings" @bind-VerticalOffset="@verticalOffset" @bind-HorizontalOffset="@horizontalOffset" ScrollLimit="@scrollLimit" @bind-CurrentZoom="@currentZoom" @bind-MinZoom="minZoom" @bind-MaxZoom="@maxZoom" @bind-CanAutoScroll="@canAutoScroll">
        </ScrollSettings>*@
        @*<ScrollSettings CurrentZoom="3">
        </ScrollSettings>*@
    </SfDiagramWasm>
</div>
<div id="properties">
    <input type="button" @onclick="@OnSelectAll" value="SelectAll" />
    <input type="button" @onclick="@OnSelectNode" value="SelectNode" />
    <input type="button" @onclick="@OnSelectConnector" value="SelectConnector" />
    <input type="button" @onclick="@OnUnSelect" value="UnSelect" />
    <input type="button" @onclick="@OnClearSelection" value="ClearSelection" />
    
    <br />
    <input type="checkbox" @bind-value="@IsCancelEvent" /> IsCancelEvent
    <input type="button" @onclick="@OnClearEventTracker" value="Clear">

    <div id="eventtracker" style="overflow: scroll;height:400px;width:249px;border: 1px solid gray">
        @EventValue
    </div>
</div>

@code{

        DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
        DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();

        string EventValue = string.Empty;
        bool IsCancelEvent = false;

        protected override void OnInitialized()
        {
            nodes.Add(
                new Node()
                {
                    ID = "node1",
                    Width = 100,
                    Height = 100,
                    OffsetX = 50,
                    OffsetY = 50,
                });
            nodes.Add(new Node()
            {
                ID = "node2",
                OffsetX = 2000,
                OffsetY = 2000,
                Width = 80,
                Height = 130,
            });
            nodes.Add(new Node()
            {
                ID = "node3",
                OffsetX = 300,
                OffsetY = 350,
                Width = 100,
                Height = 75
            });

            connectors.Add(new Connector() { Constraints = ConnectorConstraints.Default | ConnectorConstraints.DragSegmentThumb, SourcePoint = new Point { X = 200, Y = 100 }, TargetPoint = new Point { X = 340, Y = 150 }, Segments = new DiagramObjectCollection<ConnectorSegment> { new StraightSegment() { Type = Segments.Straight, Point = new Point { X = 300, Y = 200 } } } });
            connectors.Add(new Connector() { Constraints = ConnectorConstraints.Default | ConnectorConstraints.DragSegmentThumb, Type = Segments.Orthogonal, SourcePoint = new Point { X = 400, Y = 100 }, TargetPoint = new Point { X = 500, Y = 200 }, Segments = new DiagramObjectCollection<ConnectorSegment>() { new OrthogonalSegment() { Direction = Direction.Top, Length = 50 }, new OrthogonalSegment() { Direction = Direction.Left, Length = 100 } } });
        connectors.Add(new Connector() { Constraints = ConnectorConstraints.Default | ConnectorConstraints.DragSegmentThumb, Type = Segments.Bezier, SourcePoint = new Point { X = 100, Y = 200 }, TargetPoint = new Point { X = 200, Y = 300 }, Segments = new DiagramObjectCollection<ConnectorSegment> { new BezierSegment() { Type = Segments.Bezier, Point = new Point { X = 100, Y = 150 } } } });
    }

    SfDiagramWasm diagram;


    private void OnSelectionChange(SelectionChangeEventArgs args)
    {
        args.Cancel = IsCancelEvent;
        EventValue += "SelectionChange:\n";
        EventValue += "args.State:" + args.State +
        "\n args.Type:" + args.Type + "\n args.Cancel:" + args.Cancel + "\n args.Cause:" + args.Cause +
        "args.NewValue.Count:" + args.NewValue.Count + "\n";

        NodeBase obj;

        if (args.NewValue.Count > 0)
        {
            for (int i = 0; i < args.NewValue.Count; i++)
            {
                obj = args.NewValue[i] as NodeBase;
                EventValue += "args.NewValue[" + i + "].ID" + obj.ID + "\n";
            }
        }

        EventValue += "args.OldValue.Count:" + args.OldValue.Count+ "\n";

        if (args.OldValue.Count > 0)
        {
            for (int i = 0; i < args.OldValue.Count; i++)
            {
                obj = args.OldValue[i] as NodeBase;
                EventValue += "args.OldValue[" + i + "].ID" + obj.ID + "\n";
            }
        }
    }

    private void OnClearSelection()
    {
        diagram.ClearSelection();
    }

    private void OnSelectAll()
    {
        diagram.SelectAll();
    }

    private void OnSelectNode()
    {
        bool isMultipleSelection = (diagram.SelectedItems.Nodes.Count + diagram.SelectedItems.Connectors.Count) > 0 ? true : false;
        diagram.Select(new ObservableCollection<IDiagramObject>{ diagram.Nodes[0] }, isMultipleSelection);
    }

    private void OnSelectConnector()
    {
        bool isMultipleSelection = (diagram.SelectedItems.Nodes.Count + diagram.SelectedItems.Connectors.Count) > 0 ? true: false;
        diagram.Select(new ObservableCollection<IDiagramObject> { diagram.Connectors[0] }, isMultipleSelection);
    }

    private void OnUnSelect()
    {
        IDiagramObject obj;
        obj = diagram.SelectedItems.Nodes.Count > 0 ? diagram.SelectedItems.Nodes[0] as IDiagramObject : (diagram.SelectedItems.Connectors.Count > 0) ? diagram.SelectedItems.Connectors[0] as IDiagramObject : null;
        diagram.UnSelect(obj);
    }

    private void OnClearEventTracker()
    {
        EventValue = "";
    }

    private void OnPositionChange(DraggingEventArgs args)
    {
        args.Cancel = IsCancelEvent;
    }

}