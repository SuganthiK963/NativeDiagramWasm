@page "/Port"

@using Syncfusion.Blazor.Diagrams.Wasm
@using System.Collections.ObjectModel

@inject IJSRuntime js

<style>
    #diagram-space {
        width: 70%;
        float: left;
    }

    #properties {
        width: 25%;
        float: right;
    }
</style>

<div id="properties">

    @*<input type="button" id="drag" value="Drag-Port" @onclick="@dragPort" />
        <input type="button" id="move" value="Hover" @onclick="@HoverConnector" />

        <br />
        <b> Node Selection</b><br />
        <select id="selectionOption" @onchange="@SelectNode">
            <option disabled selected>Nodes</option>
            <option value="node1">Node 1</option>
            <option value="node2">Node 2</option>
            <option value="node3">Node 3</option>
            <option value="node5">Node 5</option>
            <option value="node6">Node 6</option>

        </select><br />*@
    <input type="button" id="add" value="Add-Port" @onclick="@AddPort" />
    <input type="button" id="remove" value="Remove-Port" @onclick="@RemovePort" />
    <b> OffsetX</b>
    <select id="poffsetx" @onchange="@PortOffsetXChange">
        <option disabled selected>offsetx</option>
        <option value="0">0</option>
        <option value="0.5">0.5</option>
        <option value="1">1</option>
    </select><br />
    <br />

    <b> OffsetY</b>
    <select id="poffsety" @onchange="@PortOffsetYChange">
        <option disabled selected>offsetx</option>
        <option value="0">0</option>
        <option value="0.5">0.5</option>
        <option value="1">1</option>
    </select><br />

    @*<input type="button" id="offset" value="Port-Offset" @onclick="@PortOffsetChange" />*@
    <br />
    @*<b>Interaction:</b><br />
        <select id="interaction" @onchange="@onInteraction">
            <option disabled selected>Select an interaction</option>
            <option value="dragSourceEnd">Drag Source End</option>
            <option value="dragTargetEnd">Drag Target End</option>
            <option value="dragConnector">Drag Connector</option>
            <option value="rotate">Rotate</option>
            <option value="drag">Drag</option>
        </select> <br />*@

    <b> Vertical Alignment</b>
    <select id="valignment" @onchange="@portVAlignment">
        <option disabled selected>Alignment</option>
        <option value="Stretch">Stretch</option>
        <option value="Top">Top</option>
        <option value="Bottom">Bottom</option>
        <option value="Center">Center</option>
        <option value="Auto">Auto</option>
    </select><br />
    <b> Horzontal Alignment</b>
    <select id="halignment" @onchange="@portHAlignment">
        <option disabled selected>Alignment</option>
        <option value="Stretch">Stretch</option>
        <option value="Left">Left</option>
        <option value="Right">Right</option>
        <option value="Center">Center</option>
        <option value="Auto">Auto</option>
    </select><br />
    <b>Port-FillColor</b>
    <select id="pfillColor" @onchange="@portFillColor">
        <option disabled selected>White</option>
        <option value="Blue">Blue</option>
        <option value="Yellow">Yellow</option>
        <option value="Green">Green</option>
        <option value="Brown">Brown</option>
    </select><br />
    <b>Port-StrokeColor</b>
    <select id="pstrokecolor" @onchange="@portStrokeColor">
        <option disabled selected>White</option>
        <option value="Blue">Blue</option>
        <option value="Yellow">Yellow</option>
        <option value="Green">Green</option>
        <option value="Brown">Brown</option>
    </select><br />
    <b>Port-StrokeWidth</b>
    <select id="pstrokewidth" @onchange="@portStrokeWidth">
        <option disabled selected>1</option>
        <option value="2">2</option>
        <option value="3">3</option>
        <option value="4">4</option>
        <option value="5">5</option>
    </select><br />
    <b>Port-Width</b>
    <select id="pwidth" @onchange="@portWidth">
        <option disabled selected>12</option>
        <option value="15">15</option>
        <option value="20">20</option>
        <option value="25">25</option>
        <option value="30">30</option>
    </select><br />
    <b>Port-Height</b>
    <select id="alignment" @onchange="@portHeight">
        <option disabled selected>12</option>
        <option value="15">15</option>
        <option value="20">20</option>
        <option value="25">25</option>
        <option value="30">30</option>
    </select><br />

    <b>Port-Shapes</b>
    <select id="shapes" @onchange="@portShapes">
        <option disabled selected>Style</option>
        <option value="Circle">Circle</option>
        <option value="X">X</option>
        <option value="Custom">Custom</option>
        <option value="Square">Square</option>
    </select><br />

    <b>Port-Visibility</b>
    <select id="visibility" @onchange="@portVisibility">
        <option disabled selected>Visibility</option>
        <option value="Visible">Visible</option>
        <option value="Hidden">Hidden</option>
        <option value="Hover">Hover</option>
        <option value="Connect">Connect</option>
    </select><br />

    <b> Opacity</b>
    <select id="poffsety" @onchange="@portOpacity">
        <option disabled selected>offsetx</option>
        <option value="0">0</option>
        <option value="0.1">0.1</option>
        <option value="0.2">0.2</option>
        <option value="0.3">0.3</option>
        <option value="0.4">0.4</option>
        <option value="0.5">0.5</option>
        <option value="0.7">0.6</option>
        <option value="0.7">0.7</option>
        <option value="0.8">0.8</option>
        <option value="0.9">0.9</option>
        <option value="1">1</option>
    </select><br />

    <select id="pdasharray" @onchange="@portDashArray">
        <option disabled selected>Style</option>
        <option value="1,1">1,1</option>
        <option value="1,2">1,2</option>
        <option value="2,2">2,2</option>
        <option value="2,3">2,3</option>
        <option value="3,3">3,3</option>
        <option value="3,4">3,4</option>
        <option value="4,4">4,4</option>
    </select><br />
</div>

<div class="control-section">
    <link href="https://cdn.syncfusion.com/ej2/17.2.46/material.css" rel="stylesheet" />
    <link href="https://ej2.syncfusion.com/javascript/demos/src/diagram/styles/diagram-common.css" rel="stylesheet">

    <div id="diagram-space" class="sb-mobile-diagram">

        <SfDiagramWasm @ref="diagram" ID="diagram" Width="700px" Height="500px" Nodes="NodeCollection">
            
        </SfDiagramWasm>
    </div>
</div>

@functions
    {
    double offsetX = 0;
    double offsetY = 0;
    double opacity = 0;
    public string ID = "diagram";

    SfDiagramWasm diagram;

    public string Height { get; set; } = "700px";

    public DiagramObjectCollection<Node> NodeCollection
    {
        get;
        set;
    }

    //public DiagramObjectCollection<Connector> Connectors = new DiagramObjectCollection<Connector>();

    //public DiagramObjectCollection<NodeAnnotation> NodeAnnotations = new DiagramObjectCollection<NodeAnnotation>();

    //public DiagramObjectCollection<ConnectorAnnotation> ConnectorAnnotations = new DiagramObjectCollection<ConnectorAnnotation>();

    public DiagramObjectCollection<PointPort> NodePorts2 = new DiagramObjectCollection<PointPort>();

    protected override void OnInitialized()
    {

        NodePorts2 = new DiagramObjectCollection<PointPort>();

        PointPort port21 = new PointPort()
        {
            ID = "port21",
            Constraints = PortConstraints.Default | PortConstraints.Drag,
            Offset = new Point() { X = 0, Y = 0 },
            Height = 10,
            Width = 10,
            Visibility = PortVisibility.Visible,
            Style = new ShapeStyle() { Fill = "yellow", StrokeColor = "blue" }
        };
        NodePorts2.Add(port21);
        PointPort port22 = new PointPort()
        {
            ID = "port22",
            Offset = new Point() { X = 0.5, Y = 0.5 },
            Height = 10,
            Width = 10,
            Visibility = PortVisibility.Visible,
            Style = new ShapeStyle() { Fill = "yellow", StrokeColor = "blue" }
        };
        NodePorts2.Add(port22);
        PointPort port23 = new PointPort()
        {
            ID = "port23",
            Constraints = PortConstraints.Default | PortConstraints.Drag,
            Offset = new Point() { X = 1, Y = 0.5 },
            Height = 10,
            Width = 10,
            Visibility = PortVisibility.Visible,
            Style = new ShapeStyle() { Fill = "yellow", StrokeColor = "blue" }
        };
        NodePorts2.Add(port23);

        NodeCollection = new DiagramObjectCollection<Node>();

        Node node1 = new Node()
        {
            OffsetX = 300,
            OffsetY = 100,
            Height = 100,
            Width = 100,
            ID = "node1",
            //Ports = new DiagramObjectCollection<PointPort>()
            //{
            //    new PointPort()
            //    {
            //        ID="Default",
            //        Visibility = PortVisibility.Visible,
            //        Offset = new Point() { X = 1, Y = 0.5},
            //        Height = 20, Width = 20
            //    }
            //}
        };
        NodeCollection.Add(node1);

        //        Node node2 = new Node()
        //        {
        //            OffsetX = 200,
        //            OffsetY = 300,
        //            Height = 100,
        //            Width = 100,
        //            ID = "node2",
        //            Ports = new DiagramObjectCollection<PointPort>()
        //{
        //                new PointPort()
        //                {
        //                    ID="left",
        //                    Visibility = PortVisibility.Visible,
        //                    Offset = new Point() { X= 0, Y = 0.5}
        //                },
        //                new PointPort()
        //                {
        //                    ID="right",
        //                    Visibility = PortVisibility.Visible,
        //                    Offset = new Point() { X = 1, Y = 0.5}
        //                }
        //            }
        //        };
        //        NodeCollection.Add(node2);

        //        Node node3 = new Node()
        //        {
        //            OffsetX = 400,
        //            OffsetY = 300,
        //            Height = 100,
        //            Width = 100,
        //            ID = "node3",
        //            Ports = new DiagramObjectCollection<PointPort>()
        //{
        //                new PointPort()
        //                {
        //                    ID="left",
        //                    Visibility = PortVisibility.Visible,
        //                    Offset = new Point() { X= 0, Y = 0.5}
        //                },
        //                new PointPort()
        //                {
        //                    ID="right",
        //                    Visibility = PortVisibility.Visible,
        //                    Offset = new Point() { X = 1, Y = 0.5}
        //                }
        //            }
        //        };
        //        NodeCollection.Add(node3);

        //        Node node4 = new Node()
        //        {
        //            OffsetX = 300,
        //            OffsetY = 500,
        //            Height = 100,
        //            Width = 100,
        //            ID = "node4",
        //            Ports = NodePorts2
        //        };
        //        NodeCollection.Add(node4);

        //        Node node5 = new Node()
        //        {
        //            OffsetX = 700,
        //            OffsetY = 100,
        //            Height = 100,
        //            Width = 100,
        //            ID = "node5",
        //            Ports = new DiagramObjectCollection<PointPort>()
        //{
        //                new PointPort()
        //                {
        //                    ID="Default",
        //                    Visibility = PortVisibility.Visible,
        //                    Offset = new NodePortOffset() { X = 0, Y = 0.5},
        //                    Height = 20, Width = 20
        //                }
        //            }
        //        };
        //        NodeCollection.Add(node5);

        //        Node node6 = new Node()
        //        {
        //            OffsetX = 100,
        //            OffsetY = 100,
        //            Height = 100,
        //            Width = 100,
        //            ID = "node6",
        //            Ports = new DiagramObjectCollection<PointPort>()
        //{
        //                new PointPort()
        //                {
        //                    ID="Default",
        //                    Visibility = PortVisibility.Visible,
        //                    Height = 20,
        //                    Width = 20
        //                }
        //            }
        //        };
        //        NodeCollection.Add(node6);


        //        Connector connector = new Connector()
        //        {
        //            ID = "connector1",
        //            SourceID = "node2",
        //            TargetID = "node3",
        //            SourcePortID = "right",
        //            TargetPortID = "left",
        //            Annotations = ConnectorAnnotations
        //        };
        //        Connectors.Add(connector);
        //        Connector connector2 = new Connector()
        //        {
        //            ID = "connector2",
        //            SourcePoint = new ConnectorSourcePoint() { X = 500, Y = 100 },
        //            TargetPoint = new ConnectorTargetPoint() { X = 600, Y = 100 }

        //        };
        //        Connectors.Add(connector2);


    }

    public void SelectNode(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        //DiagramInteractionUtil.SelectNode(js, ID, (string)args.Value);
    }

    public void onInteraction(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        //DiagramInteractionUtil.Interaction(js, ID, (string)args.Value);
    }

    public void SelectConnector(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        //DiagramInteractionUtil.SelectConnector(js, ID, (string)args.Value);
    }

    public void dragPort()
    {
        //DiagramInteractionUtil.DragPort(js, ID, diagram.SelectedItems.Nodes[0].ID, 80, 70);
    }

    public void HoverConnector()
    {
        //DiagramInteractionUtil.MouseMove(js, ID, diagram.SelectedItems.Nodes[0].ID);
    }

    public void DragTargetEnd()
    {
        //DiagramInteractionUtil.DragTargetEnd(js, ID, "node5");
    }

    public void DragSourceEnd()
    {
        //DiagramInteractionUtil.DragSourceEnd(js, ID, "node1");
    }

    public void portVAlignment(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        string alignment = (string)args.Value;
        Node node = NodeCollection[0];
        //node.BeginUpdate();
        if (node.Ports.Count > 0)
        {
            switch (alignment)
            {
                case "Stretch":
                    node.Ports[0].VerticalAlignment = VerticalAlignment.Stretch;
                    break;
                case "Top":
                    node.Ports[0].VerticalAlignment = VerticalAlignment.Top;
                    break;
                case "Bottom":
                    node.Ports[0].VerticalAlignment = VerticalAlignment.Bottom;
                    break;
                case "Center":
                    node.Ports[0].VerticalAlignment = VerticalAlignment.Center;
                    break;
                case "Auto":
                    node.Ports[0].VerticalAlignment = VerticalAlignment.Auto;
                    break;
            }
            //node.EndUpdate();

        }

    }
    public void portFillColor(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        string alignment = (string)args.Value;
        Node node = NodeCollection[0];
        node.Ports[0].Style.Fill = alignment;
    }
    public void portStrokeColor(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        string alignment = (string)args.Value;
        Node node = NodeCollection[0];
        node.Ports[0].Style.StrokeColor = alignment;
    }
    public void portStrokeWidth(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        double val = double.Parse(args.Value.ToString());
        Node node = NodeCollection[0];
        node.Ports[0].Style.StrokeWidth = val;
    }
    public void portWidth(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        double val = double.Parse(args.Value.ToString());
        Node node = NodeCollection[0];
        node.Ports[0].Width = val;
    }
    public void portOpacity(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        double val = double.Parse(args.Value.ToString());
        Node node = NodeCollection[0];
        node.Ports[0].Style.Opacity = val;
        opacity = val;
    }
    public void portDashArray(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        string alignment = (string)args.Value;
        Node node = NodeCollection[0];
        node.Ports[0].Style.StrokeDashArray = alignment;
    }
    public void portHeight(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        double val = double.Parse(args.Value.ToString());
        Node node = NodeCollection[0];
        node.Ports[0].Height = val;
    }
    public void portHAlignment(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        string alignment = (string)args.Value;
        Node node = NodeCollection[0];
        //node.BeginUpdate();
        if (node.Ports.Count > 0)
        {
            switch (alignment)
            {
                case "Stretch":
                    node.Ports[0].HorizontalAlignment = HorizontalAlignment.Stretch;
                    break;
                case "Left":
                    node.Ports[0].HorizontalAlignment = HorizontalAlignment.Left;
                    break;
                case "Right":
                    node.Ports[0].HorizontalAlignment = HorizontalAlignment.Right;
                    break;
                case "Center":
                    node.Ports[0].HorizontalAlignment = HorizontalAlignment.Center;
                    break;
                case "Auto":
                    node.Ports[0].HorizontalAlignment = HorizontalAlignment.Auto;
                    break;
            }
            //node.EndUpdate();

        }

    }

    public void portShapes(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        string style = (string)args.Value;
        Node node = NodeCollection[0];
        if (node.Ports.Count > 0)
        {
            switch (style)
            {
                case "Circle":
                    node.Ports[0].Shape = PortShapes.Circle;
                    break;
                case "X":
                    node.Ports[0].Shape = PortShapes.X;
                    break;
                case "Custom":
                    diagram.BeginUpdate();
                    node.Ports[0].Shape = PortShapes.Custom;
                    node.Ports[0].PathData = "M10,19.707L0.293,10L10,0.293L19.707,10L10,19.707Z";
                    diagram.EndUpdate();
                    break;
                case "Square":
                    node.Ports[0].Shape = PortShapes.Square;
                    break;
            }
        }
    }

    public void portVisibility(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        string style = (string)args.Value;
        //string id = diagram.SelectedItems.Nodes[0].ID;
        Node node = diagram.Nodes[0];//.GetNode(id);
        if (node.Ports.Count > 0)
        {
            switch (style)
            {
                case "Visible":
                    node.Ports[0].Visibility = PortVisibility.Visible;
                    break;
                case "Hidden":
                    node.Ports[0].Visibility = PortVisibility.Hidden;
                    break;
                case "Hover":
                    node.Ports[0].Visibility = PortVisibility.Hover;
                    break;
                case "Connect":
                    node.Ports[0].Visibility = PortVisibility.Connect;
                    break;
            }
        }
    }

    public void PortOffsetXChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        double val = double.Parse(args.Value.ToString());
        NodeCollection[0].Ports[0].Offset = new Point() { X = val, Y = NodeCollection[0].Ports[0].Offset.Y };
        offsetX = val;
    }

    public void PortOffsetYChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        double val = double.Parse(args.Value.ToString());
        NodeCollection[0].Ports[0].Offset = new Point() { X = NodeCollection[0].Ports[0].Offset.X, Y = val };
        offsetY = val;
    }
    public void ConstraintsNone(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        //string id = diagram.SelectedItems.Nodes[0].ID;
        Node node = diagram.Nodes[0];//.GetNode(id);

        if (node.Ports.Count > 0)
        {
            if (args.Checked)
            {
                node.Ports[0].Constraints = PortConstraints.None;
            }
            else
            {
                node.Ports[0].Constraints = PortConstraints.Default;
            }
        }
    }

    public void ConstraintsDrag(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        //string id = diagram.SelectedItems.Nodes[0].ID;
        Node node = diagram.Nodes[0];//.GetNode(id);

        if (node.Ports.Count > 0)
        {
            if (args.Checked)
            {
                node.Ports[0].Constraints = PortConstraints.Drag;
            }
            else
            {
                node.Ports[0].Constraints &= ~PortConstraints.Drag;
            }
        }
    }

    public void ConstraintsDraw(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        //string id = diagram.SelectedItems.Nodes[0].ID;
        Node node = diagram.Nodes[0];//.GetNode(id);

        if (node.Ports.Count > 0)
        {
            if (args.Checked)
            {
                node.Ports[0].Constraints = PortConstraints.Draw;
            }
            else
            {
                node.Ports[0].Constraints &= ~PortConstraints.Draw;
            }
        }
    }

    public void ConstraintsInconnect(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        //string id = diagram.SelectedItems.Nodes[0].ID;
        Node node = diagram.Nodes[0];//.GetNode(id);

        if (node.Ports.Count > 0)
        {
            if (args.Checked)
            {
                node.Ports[0].Constraints = PortConstraints.InConnect;
            }
            else
            {
                node.Ports[0].Constraints &= ~PortConstraints.InConnect;
            }
        }
    }

    public void ConstraintsOutConnect(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        //string id = diagram.SelectedItems.Nodes[0].ID;
        Node node = diagram.Nodes[0];//.GetNode(id);

        if (node.Ports.Count > 0)
        {
            if (args.Checked)
            {
                node.Ports[0].Constraints = PortConstraints.OutConnect;
            }
            else
            {
                node.Ports[0].Constraints &= ~PortConstraints.OutConnect;
            }
        }
    }

    public void ConstraintsDefault(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        //string id = diagram.SelectedItems.Nodes[0].ID;
        Node node = diagram.Nodes[0];//.GetNode(id);


        if (node.Ports.Count > 0)
        {
            if (args.Checked)
            {
                node.Ports[0].Constraints = PortConstraints.Default;
            }
            else
            {
                node.Ports[0].Constraints = PortConstraints.None;
            }
        }
    }



    public void AddPort()
    {

        PointPort annotation = new PointPort() { Visibility = PortVisibility.Visible, Offset = new Point() { X = 0.5, Y = 1.3 } };
        NodeCollection[0].Ports.Add(annotation);

    }

    public void RemovePort()
    {
        NodeCollection[0].Ports.Remove(NodeCollection[0].Ports[0]);
    }

    public async void OnUndo()
    {
        //await diagram.Undo();
    }

    public async void OnRedo()
    {
        //await diagram.Redo();
    }

    public async void Cut()
    {
        //await diagram.Cut();
    }

    public async void Copy()
    {
        //await diagram.Copy();
    }

    public async void Paste()
    {
        //await diagram.Paste();
    }

}
