#pragma checksum "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\MultiConOrthSeg.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "fa3219ea97a40f31849d1af57fea77472438ce4d"
// <auto-generated/>
#pragma warning disable 1591
namespace WasmNativeImplementation.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using WasmNativeImplementation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using WasmNativeImplementation.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\MultiConOrthSeg.razor"
using Syncfusion.Blazor.Diagrams.Wasm;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\MultiConOrthSeg.razor"
using System.Collections.ObjectModel;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/MultipleConnectorOrthoSegment/PointToPoint")]
    public partial class MultiConOrthSeg : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.OpenComponent<Syncfusion.Blazor.Diagrams.Wasm.SfDiagramWasm>(0);
            __builder.AddAttribute(1, "ID", "diagram");
            __builder.AddAttribute(2, "Width", "1000px");
            __builder.AddAttribute(3, "Height", "500px");
            __builder.AddAttribute(4, "Connectors", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Syncfusion.Blazor.Diagrams.Wasm.DiagramObjectCollection<Syncfusion.Blazor.Diagrams.Wasm.Connector>>(
#nullable restore
#line 6 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\MultiConOrthSeg.razor"
                                                                       connectors

#line default
#line hidden
#nullable disable
            ));
            __builder.CloseComponent();
        }
        #pragma warning restore 1998
#nullable restore
#line 8 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\MultiConOrthSeg.razor"
      

    DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();

    DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();

    protected override void OnInitialized()
    {
       
        Direction[] dir = new Direction[] { Direction.Right, Direction.Left, Direction.Top, Direction.Bottom };
        Point[] sourcePoints = new Point[] { new Point { X = 300, Y = 200 }, new Point { X = 550, Y = 250 }, new Point { X = 250, Y = 400 }, new Point { X = 550, Y = 400 } };
        Point[] targetPoints = new Point[] { new Point { X = 100, Y = 100 }, new Point { X = 700, Y = 100 }, new Point { X = 100, Y = 500 }, new Point { X = 700, Y = 500 } };
        int con = 0;
        for (int k = 0; k < sourcePoints.Length; k++)
        {
            for (int l = 0; l < dir.Length; l++)
            {
                Connector connector = new Connector()
                {
                    ID = "connector" + con,
                    Type = Segments.Orthogonal,
                    SourcePoint = sourcePoints[k],
                    TargetPoint = targetPoints[k], CornerRadius=20,
                    Segments = new DiagramObjectCollection<ConnectorSegment>(){
                    new OrthogonalSegment { Type= Segments.Orthogonal, Direction= dir[l], Length= 50 } },
                };
                connectors.Add(connector);
                con++;
            }
        }

    }


#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
