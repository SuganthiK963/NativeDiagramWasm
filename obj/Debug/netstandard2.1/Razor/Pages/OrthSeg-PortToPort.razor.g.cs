#pragma checksum "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\OrthSeg-PortToPort.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "18c577eb0c25c9e9e762d3000fe477ca5e7badd1"
// <auto-generated/>
#pragma warning disable 1591
namespace WasmNativeImplementation.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using WasmNativeImplementation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using WasmNativeImplementation.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\OrthSeg-PortToPort.razor"
using Syncfusion.Blazor.Diagrams.Wasm;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\OrthSeg-PortToPort.razor"
using System.Collections.ObjectModel;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/OrthoSegment/PortToPort")]
    public partial class OrthSeg_PortToPort : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.OpenComponent<Syncfusion.Blazor.Diagrams.Wasm.SfDiagramWasm>(0);
            __builder.AddAttribute(1, "ID", "diagram");
            __builder.AddAttribute(2, "Width", "1000px");
            __builder.AddAttribute(3, "Height", "1000px");
            __builder.AddAttribute(4, "Nodes", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Syncfusion.Blazor.Diagrams.Wasm.DiagramObjectCollection<Syncfusion.Blazor.Diagrams.Wasm.Node>>(
#nullable restore
#line 6 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\OrthSeg-PortToPort.razor"
                                                                   nodes

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(5, "Connectors", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Syncfusion.Blazor.Diagrams.Wasm.DiagramObjectCollection<Syncfusion.Blazor.Diagrams.Wasm.Connector>>(
#nullable restore
#line 6 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\OrthSeg-PortToPort.razor"
                                                                                       connectors

#line default
#line hidden
#nullable disable
            ));
            __builder.CloseComponent();
        }
        #pragma warning restore 1998
#nullable restore
#line 8 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\OrthSeg-PortToPort.razor"
      

    DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();

    DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();

    protected override void OnInitialized()
    {
        int count = 1; int offsetY = 100; int offsetX = 100;
        for (var i = 0; i < 9; i++)
        {
            Node node = new Node {
                ID= "node" + i, OffsetX= ((count) * offsetX), OffsetY= offsetY, Width= 50, Height= 50,
                Ports=new DiagramObjectCollection<PointPort>()
                        {
                            new PointPort(){ID="port1", Offset=new Point{X=0, Y=0.5}, Visibility=PortVisibility.Visible},
                            new PointPort(){ID="port2", Offset=new Point{X=0.5, Y=0}, Visibility=PortVisibility.Visible},
                            new PointPort(){ID="port3", Offset=new Point{X=1, Y=0.5}, Visibility=PortVisibility.Visible},
                            new PointPort(){ID="port4", Offset=new Point{X=0.5, Y=1}, Visibility=PortVisibility.Visible},
                        }
            };
            if (node.ID == "node1")
            {
                node.OffsetX = 550; node.OffsetY = 250;
            }
            else if (node.ID == "node3")
            {
                node.OffsetX = 250;  node.OffsetY = 250;
            }
            else if (node.ID == "node5")
            {
                node.OffsetX = 550; node.OffsetY = 400;
            }
            else if (node.ID == "node7")
            {
                node.OffsetX = 250; node.OffsetY = 400;
            }
            if (node.ID != "node4")
                nodes.Add(node);
            count += 3;
            if (count == 10)
            {
                count = 1;
                offsetX = 100;
                offsetY = offsetY + 200;
            }
        }
        Direction[] dir = new Direction[] { Direction.Right, Direction.Left, Direction.Top, Direction.Bottom };
        string[] ports = new string[] { "port1", "port2", "port3", "port4" };
        string[] targetNodes = new string[] { "node0", "node2", "node6", "node8" };
        string[] sourceNodes = new string[] { "node3", "node1", "node7", "node5" };
        int con = 0;
        for (int i = 0; i < sourceNodes.Length; i++)
        {
            for (var k = 0; k < ports.Length; k++)
            {
                for (var l = 0; l < ports.Length; l++)
                {
                    for (int j = 0; j < dir.Length; j++)
                    {
                        Connector connector = new Connector
                        {
                            ID = "connector" + con,
                            Type = Segments.Orthogonal,
                            TargetID = targetNodes[i],
                            SourceID = sourceNodes[i],
                            SourcePortID = ports[k],
                            TargetPortID = ports[l],
                            //Segments = new DiagramObjectCollection<ConnectorSegment>(){
                            //    new OrthogonalSegment { Type= Segments.Orthogonal, Direction= dir[j], Length= 50 }
                            //},
                            //TargetPadding = 20, SourcePadding = 20,
                        };
                        //if(con == 18)
                            connectors.Add(connector);
                        con++;
                    }
                }
            }
        }

    }


#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
