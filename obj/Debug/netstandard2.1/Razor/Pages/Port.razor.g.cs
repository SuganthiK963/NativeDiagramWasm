#pragma checksum "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\Port.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6e636cae5516a0d8908356775be4852c57236792"
// <auto-generated/>
#pragma warning disable 1591
namespace WasmNativeImplementation.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using WasmNativeImplementation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using WasmNativeImplementation.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\Port.razor"
using Syncfusion.Blazor.Diagrams.Wasm;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\Port.razor"
using System.Collections.ObjectModel;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Port")]
    public partial class Port : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.AddMarkupContent(0, "<style>\r\n    #diagram-space {\r\n        width: 70%;\r\n        float: left;\r\n    }\r\n\r\n    #properties {\r\n        width: 25%;\r\n        float: right;\r\n    }\r\n</style>\r\n\r\n");
            __builder.OpenElement(1, "div");
            __builder.AddAttribute(2, "id", "properties");
            __builder.AddMarkupContent(3, "\r\n\r\n    ");
            __builder.OpenElement(4, "input");
            __builder.AddAttribute(5, "type", "button");
            __builder.AddAttribute(6, "id", "add");
            __builder.AddAttribute(7, "value", "Add-Port");
            __builder.AddAttribute(8, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 36 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\Port.razor"
                                                              AddPort

#line default
#line hidden
#nullable disable
            ));
            __builder.CloseElement();
            __builder.AddMarkupContent(9, "\r\n    ");
            __builder.OpenElement(10, "input");
            __builder.AddAttribute(11, "type", "button");
            __builder.AddAttribute(12, "id", "remove");
            __builder.AddAttribute(13, "value", "Remove-Port");
            __builder.AddAttribute(14, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 37 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\Port.razor"
                                                                    RemovePort

#line default
#line hidden
#nullable disable
            ));
            __builder.CloseElement();
            __builder.AddMarkupContent(15, "\r\n    ");
            __builder.AddMarkupContent(16, "<b> OffsetX</b>\r\n    ");
            __builder.OpenElement(17, "select");
            __builder.AddAttribute(18, "id", "poffsetx");
            __builder.AddAttribute(19, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 39 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\Port.razor"
                                      PortOffsetXChange

#line default
#line hidden
#nullable disable
            ));
            __builder.AddMarkupContent(20, "\r\n        ");
            __builder.OpenElement(21, "option");
            __builder.AddAttribute(22, "disabled", true);
            __builder.AddAttribute(23, "selected", true);
            __builder.AddContent(24, "offsetx");
            __builder.CloseElement();
            __builder.AddMarkupContent(25, "\r\n        ");
            __builder.OpenElement(26, "option");
            __builder.AddAttribute(27, "value", "0");
            __builder.AddContent(28, "0");
            __builder.CloseElement();
            __builder.AddMarkupContent(29, "\r\n        ");
            __builder.OpenElement(30, "option");
            __builder.AddAttribute(31, "value", "0.5");
            __builder.AddContent(32, "0.5");
            __builder.CloseElement();
            __builder.AddMarkupContent(33, "\r\n        ");
            __builder.OpenElement(34, "option");
            __builder.AddAttribute(35, "value", "1");
            __builder.AddContent(36, "1");
            __builder.CloseElement();
            __builder.AddMarkupContent(37, "\r\n    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(38, "<br>\r\n    <br>\r\n\r\n    ");
            __builder.AddMarkupContent(39, "<b> OffsetY</b>\r\n    ");
            __builder.OpenElement(40, "select");
            __builder.AddAttribute(41, "id", "poffsety");
            __builder.AddAttribute(42, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 48 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\Port.razor"
                                      PortOffsetYChange

#line default
#line hidden
#nullable disable
            ));
            __builder.AddMarkupContent(43, "\r\n        ");
            __builder.OpenElement(44, "option");
            __builder.AddAttribute(45, "disabled", true);
            __builder.AddAttribute(46, "selected", true);
            __builder.AddContent(47, "offsetx");
            __builder.CloseElement();
            __builder.AddMarkupContent(48, "\r\n        ");
            __builder.OpenElement(49, "option");
            __builder.AddAttribute(50, "value", "0");
            __builder.AddContent(51, "0");
            __builder.CloseElement();
            __builder.AddMarkupContent(52, "\r\n        ");
            __builder.OpenElement(53, "option");
            __builder.AddAttribute(54, "value", "0.5");
            __builder.AddContent(55, "0.5");
            __builder.CloseElement();
            __builder.AddMarkupContent(56, "\r\n        ");
            __builder.OpenElement(57, "option");
            __builder.AddAttribute(58, "value", "1");
            __builder.AddContent(59, "1");
            __builder.CloseElement();
            __builder.AddMarkupContent(60, "\r\n    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(61, "<br>\r\n\r\n    <br>\r\n\r\n    ");
            __builder.AddMarkupContent(62, "<b> Vertical Alignment</b>\r\n    ");
            __builder.OpenElement(63, "select");
            __builder.AddAttribute(64, "id", "valignment");
            __builder.AddAttribute(65, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 68 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\Port.razor"
                                        portVAlignment

#line default
#line hidden
#nullable disable
            ));
            __builder.AddMarkupContent(66, "\r\n        ");
            __builder.OpenElement(67, "option");
            __builder.AddAttribute(68, "disabled", true);
            __builder.AddAttribute(69, "selected", true);
            __builder.AddContent(70, "Alignment");
            __builder.CloseElement();
            __builder.AddMarkupContent(71, "\r\n        ");
            __builder.OpenElement(72, "option");
            __builder.AddAttribute(73, "value", "Stretch");
            __builder.AddContent(74, "Stretch");
            __builder.CloseElement();
            __builder.AddMarkupContent(75, "\r\n        ");
            __builder.OpenElement(76, "option");
            __builder.AddAttribute(77, "value", "Top");
            __builder.AddContent(78, "Top");
            __builder.CloseElement();
            __builder.AddMarkupContent(79, "\r\n        ");
            __builder.OpenElement(80, "option");
            __builder.AddAttribute(81, "value", "Bottom");
            __builder.AddContent(82, "Bottom");
            __builder.CloseElement();
            __builder.AddMarkupContent(83, "\r\n        ");
            __builder.OpenElement(84, "option");
            __builder.AddAttribute(85, "value", "Center");
            __builder.AddContent(86, "Center");
            __builder.CloseElement();
            __builder.AddMarkupContent(87, "\r\n        ");
            __builder.OpenElement(88, "option");
            __builder.AddAttribute(89, "value", "Auto");
            __builder.AddContent(90, "Auto");
            __builder.CloseElement();
            __builder.AddMarkupContent(91, "\r\n    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(92, "<br>\r\n    ");
            __builder.AddMarkupContent(93, "<b> Horzontal Alignment</b>\r\n    ");
            __builder.OpenElement(94, "select");
            __builder.AddAttribute(95, "id", "halignment");
            __builder.AddAttribute(96, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 77 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\Port.razor"
                                        portHAlignment

#line default
#line hidden
#nullable disable
            ));
            __builder.AddMarkupContent(97, "\r\n        ");
            __builder.OpenElement(98, "option");
            __builder.AddAttribute(99, "disabled", true);
            __builder.AddAttribute(100, "selected", true);
            __builder.AddContent(101, "Alignment");
            __builder.CloseElement();
            __builder.AddMarkupContent(102, "\r\n        ");
            __builder.OpenElement(103, "option");
            __builder.AddAttribute(104, "value", "Stretch");
            __builder.AddContent(105, "Stretch");
            __builder.CloseElement();
            __builder.AddMarkupContent(106, "\r\n        ");
            __builder.OpenElement(107, "option");
            __builder.AddAttribute(108, "value", "Left");
            __builder.AddContent(109, "Left");
            __builder.CloseElement();
            __builder.AddMarkupContent(110, "\r\n        ");
            __builder.OpenElement(111, "option");
            __builder.AddAttribute(112, "value", "Right");
            __builder.AddContent(113, "Right");
            __builder.CloseElement();
            __builder.AddMarkupContent(114, "\r\n        ");
            __builder.OpenElement(115, "option");
            __builder.AddAttribute(116, "value", "Center");
            __builder.AddContent(117, "Center");
            __builder.CloseElement();
            __builder.AddMarkupContent(118, "\r\n        ");
            __builder.OpenElement(119, "option");
            __builder.AddAttribute(120, "value", "Auto");
            __builder.AddContent(121, "Auto");
            __builder.CloseElement();
            __builder.AddMarkupContent(122, "\r\n    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(123, "<br>\r\n    ");
            __builder.AddMarkupContent(124, "<b>Port-FillColor</b>\r\n    ");
            __builder.OpenElement(125, "select");
            __builder.AddAttribute(126, "id", "pfillColor");
            __builder.AddAttribute(127, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 86 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\Port.razor"
                                        portFillColor

#line default
#line hidden
#nullable disable
            ));
            __builder.AddMarkupContent(128, "\r\n        ");
            __builder.OpenElement(129, "option");
            __builder.AddAttribute(130, "disabled", true);
            __builder.AddAttribute(131, "selected", true);
            __builder.AddContent(132, "White");
            __builder.CloseElement();
            __builder.AddMarkupContent(133, "\r\n        ");
            __builder.OpenElement(134, "option");
            __builder.AddAttribute(135, "value", "Blue");
            __builder.AddContent(136, "Blue");
            __builder.CloseElement();
            __builder.AddMarkupContent(137, "\r\n        ");
            __builder.OpenElement(138, "option");
            __builder.AddAttribute(139, "value", "Yellow");
            __builder.AddContent(140, "Yellow");
            __builder.CloseElement();
            __builder.AddMarkupContent(141, "\r\n        ");
            __builder.OpenElement(142, "option");
            __builder.AddAttribute(143, "value", "Green");
            __builder.AddContent(144, "Green");
            __builder.CloseElement();
            __builder.AddMarkupContent(145, "\r\n        ");
            __builder.OpenElement(146, "option");
            __builder.AddAttribute(147, "value", "Brown");
            __builder.AddContent(148, "Brown");
            __builder.CloseElement();
            __builder.AddMarkupContent(149, "\r\n    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(150, "<br>\r\n    ");
            __builder.AddMarkupContent(151, "<b>Port-StrokeColor</b>\r\n    ");
            __builder.OpenElement(152, "select");
            __builder.AddAttribute(153, "id", "pstrokecolor");
            __builder.AddAttribute(154, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 94 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\Port.razor"
                                          portStrokeColor

#line default
#line hidden
#nullable disable
            ));
            __builder.AddMarkupContent(155, "\r\n        ");
            __builder.OpenElement(156, "option");
            __builder.AddAttribute(157, "disabled", true);
            __builder.AddAttribute(158, "selected", true);
            __builder.AddContent(159, "White");
            __builder.CloseElement();
            __builder.AddMarkupContent(160, "\r\n        ");
            __builder.OpenElement(161, "option");
            __builder.AddAttribute(162, "value", "Blue");
            __builder.AddContent(163, "Blue");
            __builder.CloseElement();
            __builder.AddMarkupContent(164, "\r\n        ");
            __builder.OpenElement(165, "option");
            __builder.AddAttribute(166, "value", "Yellow");
            __builder.AddContent(167, "Yellow");
            __builder.CloseElement();
            __builder.AddMarkupContent(168, "\r\n        ");
            __builder.OpenElement(169, "option");
            __builder.AddAttribute(170, "value", "Green");
            __builder.AddContent(171, "Green");
            __builder.CloseElement();
            __builder.AddMarkupContent(172, "\r\n        ");
            __builder.OpenElement(173, "option");
            __builder.AddAttribute(174, "value", "Brown");
            __builder.AddContent(175, "Brown");
            __builder.CloseElement();
            __builder.AddMarkupContent(176, "\r\n    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(177, "<br>\r\n    ");
            __builder.AddMarkupContent(178, "<b>Port-StrokeWidth</b>\r\n    ");
            __builder.OpenElement(179, "select");
            __builder.AddAttribute(180, "id", "pstrokewidth");
            __builder.AddAttribute(181, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 102 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\Port.razor"
                                          portStrokeWidth

#line default
#line hidden
#nullable disable
            ));
            __builder.AddMarkupContent(182, "\r\n        ");
            __builder.OpenElement(183, "option");
            __builder.AddAttribute(184, "disabled", true);
            __builder.AddAttribute(185, "selected", true);
            __builder.AddContent(186, "1");
            __builder.CloseElement();
            __builder.AddMarkupContent(187, "\r\n        ");
            __builder.OpenElement(188, "option");
            __builder.AddAttribute(189, "value", "2");
            __builder.AddContent(190, "2");
            __builder.CloseElement();
            __builder.AddMarkupContent(191, "\r\n        ");
            __builder.OpenElement(192, "option");
            __builder.AddAttribute(193, "value", "3");
            __builder.AddContent(194, "3");
            __builder.CloseElement();
            __builder.AddMarkupContent(195, "\r\n        ");
            __builder.OpenElement(196, "option");
            __builder.AddAttribute(197, "value", "4");
            __builder.AddContent(198, "4");
            __builder.CloseElement();
            __builder.AddMarkupContent(199, "\r\n        ");
            __builder.OpenElement(200, "option");
            __builder.AddAttribute(201, "value", "5");
            __builder.AddContent(202, "5");
            __builder.CloseElement();
            __builder.AddMarkupContent(203, "\r\n    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(204, "<br>\r\n    ");
            __builder.AddMarkupContent(205, "<b>Port-Width</b>\r\n    ");
            __builder.OpenElement(206, "select");
            __builder.AddAttribute(207, "id", "pwidth");
            __builder.AddAttribute(208, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 110 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\Port.razor"
                                    portWidth

#line default
#line hidden
#nullable disable
            ));
            __builder.AddMarkupContent(209, "\r\n        ");
            __builder.OpenElement(210, "option");
            __builder.AddAttribute(211, "disabled", true);
            __builder.AddAttribute(212, "selected", true);
            __builder.AddContent(213, "12");
            __builder.CloseElement();
            __builder.AddMarkupContent(214, "\r\n        ");
            __builder.OpenElement(215, "option");
            __builder.AddAttribute(216, "value", "15");
            __builder.AddContent(217, "15");
            __builder.CloseElement();
            __builder.AddMarkupContent(218, "\r\n        ");
            __builder.OpenElement(219, "option");
            __builder.AddAttribute(220, "value", "20");
            __builder.AddContent(221, "20");
            __builder.CloseElement();
            __builder.AddMarkupContent(222, "\r\n        ");
            __builder.OpenElement(223, "option");
            __builder.AddAttribute(224, "value", "25");
            __builder.AddContent(225, "25");
            __builder.CloseElement();
            __builder.AddMarkupContent(226, "\r\n        ");
            __builder.OpenElement(227, "option");
            __builder.AddAttribute(228, "value", "30");
            __builder.AddContent(229, "30");
            __builder.CloseElement();
            __builder.AddMarkupContent(230, "\r\n    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(231, "<br>\r\n    ");
            __builder.AddMarkupContent(232, "<b>Port-Height</b>\r\n    ");
            __builder.OpenElement(233, "select");
            __builder.AddAttribute(234, "id", "alignment");
            __builder.AddAttribute(235, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 118 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\Port.razor"
                                       portHeight

#line default
#line hidden
#nullable disable
            ));
            __builder.AddMarkupContent(236, "\r\n        ");
            __builder.OpenElement(237, "option");
            __builder.AddAttribute(238, "disabled", true);
            __builder.AddAttribute(239, "selected", true);
            __builder.AddContent(240, "12");
            __builder.CloseElement();
            __builder.AddMarkupContent(241, "\r\n        ");
            __builder.OpenElement(242, "option");
            __builder.AddAttribute(243, "value", "15");
            __builder.AddContent(244, "15");
            __builder.CloseElement();
            __builder.AddMarkupContent(245, "\r\n        ");
            __builder.OpenElement(246, "option");
            __builder.AddAttribute(247, "value", "20");
            __builder.AddContent(248, "20");
            __builder.CloseElement();
            __builder.AddMarkupContent(249, "\r\n        ");
            __builder.OpenElement(250, "option");
            __builder.AddAttribute(251, "value", "25");
            __builder.AddContent(252, "25");
            __builder.CloseElement();
            __builder.AddMarkupContent(253, "\r\n        ");
            __builder.OpenElement(254, "option");
            __builder.AddAttribute(255, "value", "30");
            __builder.AddContent(256, "30");
            __builder.CloseElement();
            __builder.AddMarkupContent(257, "\r\n    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(258, "<br>\r\n\r\n    ");
            __builder.AddMarkupContent(259, "<b>Port-Shapes</b>\r\n    ");
            __builder.OpenElement(260, "select");
            __builder.AddAttribute(261, "id", "shapes");
            __builder.AddAttribute(262, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 127 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\Port.razor"
                                    portShapes

#line default
#line hidden
#nullable disable
            ));
            __builder.AddMarkupContent(263, "\r\n        ");
            __builder.OpenElement(264, "option");
            __builder.AddAttribute(265, "disabled", true);
            __builder.AddAttribute(266, "selected", true);
            __builder.AddContent(267, "Style");
            __builder.CloseElement();
            __builder.AddMarkupContent(268, "\r\n        ");
            __builder.OpenElement(269, "option");
            __builder.AddAttribute(270, "value", "Circle");
            __builder.AddContent(271, "Circle");
            __builder.CloseElement();
            __builder.AddMarkupContent(272, "\r\n        ");
            __builder.OpenElement(273, "option");
            __builder.AddAttribute(274, "value", "X");
            __builder.AddContent(275, "X");
            __builder.CloseElement();
            __builder.AddMarkupContent(276, "\r\n        ");
            __builder.OpenElement(277, "option");
            __builder.AddAttribute(278, "value", "Custom");
            __builder.AddContent(279, "Custom");
            __builder.CloseElement();
            __builder.AddMarkupContent(280, "\r\n        ");
            __builder.OpenElement(281, "option");
            __builder.AddAttribute(282, "value", "Square");
            __builder.AddContent(283, "Square");
            __builder.CloseElement();
            __builder.AddMarkupContent(284, "\r\n    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(285, "<br>\r\n\r\n    ");
            __builder.AddMarkupContent(286, "<b>Port-Visibility</b>\r\n    ");
            __builder.OpenElement(287, "select");
            __builder.AddAttribute(288, "id", "visibility");
            __builder.AddAttribute(289, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 136 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\Port.razor"
                                        portVisibility

#line default
#line hidden
#nullable disable
            ));
            __builder.AddMarkupContent(290, "\r\n        ");
            __builder.OpenElement(291, "option");
            __builder.AddAttribute(292, "disabled", true);
            __builder.AddAttribute(293, "selected", true);
            __builder.AddContent(294, "Visibility");
            __builder.CloseElement();
            __builder.AddMarkupContent(295, "\r\n        ");
            __builder.OpenElement(296, "option");
            __builder.AddAttribute(297, "value", "Visible");
            __builder.AddContent(298, "Visible");
            __builder.CloseElement();
            __builder.AddMarkupContent(299, "\r\n        ");
            __builder.OpenElement(300, "option");
            __builder.AddAttribute(301, "value", "Hidden");
            __builder.AddContent(302, "Hidden");
            __builder.CloseElement();
            __builder.AddMarkupContent(303, "\r\n        ");
            __builder.OpenElement(304, "option");
            __builder.AddAttribute(305, "value", "Hover");
            __builder.AddContent(306, "Hover");
            __builder.CloseElement();
            __builder.AddMarkupContent(307, "\r\n        ");
            __builder.OpenElement(308, "option");
            __builder.AddAttribute(309, "value", "Connect");
            __builder.AddContent(310, "Connect");
            __builder.CloseElement();
            __builder.AddMarkupContent(311, "\r\n    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(312, "<br>\r\n\r\n    ");
            __builder.AddMarkupContent(313, "<b> Opacity</b>\r\n    ");
            __builder.OpenElement(314, "select");
            __builder.AddAttribute(315, "id", "poffsety");
            __builder.AddAttribute(316, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 145 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\Port.razor"
                                      portOpacity

#line default
#line hidden
#nullable disable
            ));
            __builder.AddMarkupContent(317, "\r\n        ");
            __builder.OpenElement(318, "option");
            __builder.AddAttribute(319, "disabled", true);
            __builder.AddAttribute(320, "selected", true);
            __builder.AddContent(321, "offsetx");
            __builder.CloseElement();
            __builder.AddMarkupContent(322, "\r\n        ");
            __builder.OpenElement(323, "option");
            __builder.AddAttribute(324, "value", "0");
            __builder.AddContent(325, "0");
            __builder.CloseElement();
            __builder.AddMarkupContent(326, "\r\n        ");
            __builder.OpenElement(327, "option");
            __builder.AddAttribute(328, "value", "0.1");
            __builder.AddContent(329, "0.1");
            __builder.CloseElement();
            __builder.AddMarkupContent(330, "\r\n        ");
            __builder.OpenElement(331, "option");
            __builder.AddAttribute(332, "value", "0.2");
            __builder.AddContent(333, "0.2");
            __builder.CloseElement();
            __builder.AddMarkupContent(334, "\r\n        ");
            __builder.OpenElement(335, "option");
            __builder.AddAttribute(336, "value", "0.3");
            __builder.AddContent(337, "0.3");
            __builder.CloseElement();
            __builder.AddMarkupContent(338, "\r\n        ");
            __builder.OpenElement(339, "option");
            __builder.AddAttribute(340, "value", "0.4");
            __builder.AddContent(341, "0.4");
            __builder.CloseElement();
            __builder.AddMarkupContent(342, "\r\n        ");
            __builder.OpenElement(343, "option");
            __builder.AddAttribute(344, "value", "0.5");
            __builder.AddContent(345, "0.5");
            __builder.CloseElement();
            __builder.AddMarkupContent(346, "\r\n        ");
            __builder.OpenElement(347, "option");
            __builder.AddAttribute(348, "value", "0.7");
            __builder.AddContent(349, "0.6");
            __builder.CloseElement();
            __builder.AddMarkupContent(350, "\r\n        ");
            __builder.OpenElement(351, "option");
            __builder.AddAttribute(352, "value", "0.7");
            __builder.AddContent(353, "0.7");
            __builder.CloseElement();
            __builder.AddMarkupContent(354, "\r\n        ");
            __builder.OpenElement(355, "option");
            __builder.AddAttribute(356, "value", "0.8");
            __builder.AddContent(357, "0.8");
            __builder.CloseElement();
            __builder.AddMarkupContent(358, "\r\n        ");
            __builder.OpenElement(359, "option");
            __builder.AddAttribute(360, "value", "0.9");
            __builder.AddContent(361, "0.9");
            __builder.CloseElement();
            __builder.AddMarkupContent(362, "\r\n        ");
            __builder.OpenElement(363, "option");
            __builder.AddAttribute(364, "value", "1");
            __builder.AddContent(365, "1");
            __builder.CloseElement();
            __builder.AddMarkupContent(366, "\r\n    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(367, "<br>\r\n\r\n    ");
            __builder.OpenElement(368, "select");
            __builder.AddAttribute(369, "id", "pdasharray");
            __builder.AddAttribute(370, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 160 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\Port.razor"
                                        portDashArray

#line default
#line hidden
#nullable disable
            ));
            __builder.AddMarkupContent(371, "\r\n        ");
            __builder.OpenElement(372, "option");
            __builder.AddAttribute(373, "disabled", true);
            __builder.AddAttribute(374, "selected", true);
            __builder.AddContent(375, "Style");
            __builder.CloseElement();
            __builder.AddMarkupContent(376, "\r\n        ");
            __builder.OpenElement(377, "option");
            __builder.AddAttribute(378, "value", "1,1");
            __builder.AddContent(379, "1,1");
            __builder.CloseElement();
            __builder.AddMarkupContent(380, "\r\n        ");
            __builder.OpenElement(381, "option");
            __builder.AddAttribute(382, "value", "1,2");
            __builder.AddContent(383, "1,2");
            __builder.CloseElement();
            __builder.AddMarkupContent(384, "\r\n        ");
            __builder.OpenElement(385, "option");
            __builder.AddAttribute(386, "value", "2,2");
            __builder.AddContent(387, "2,2");
            __builder.CloseElement();
            __builder.AddMarkupContent(388, "\r\n        ");
            __builder.OpenElement(389, "option");
            __builder.AddAttribute(390, "value", "2,3");
            __builder.AddContent(391, "2,3");
            __builder.CloseElement();
            __builder.AddMarkupContent(392, "\r\n        ");
            __builder.OpenElement(393, "option");
            __builder.AddAttribute(394, "value", "3,3");
            __builder.AddContent(395, "3,3");
            __builder.CloseElement();
            __builder.AddMarkupContent(396, "\r\n        ");
            __builder.OpenElement(397, "option");
            __builder.AddAttribute(398, "value", "3,4");
            __builder.AddContent(399, "3,4");
            __builder.CloseElement();
            __builder.AddMarkupContent(400, "\r\n        ");
            __builder.OpenElement(401, "option");
            __builder.AddAttribute(402, "value", "4,4");
            __builder.AddContent(403, "4,4");
            __builder.CloseElement();
            __builder.AddMarkupContent(404, "\r\n    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(405, "<br>\r\n");
            __builder.CloseElement();
            __builder.AddMarkupContent(406, "\r\n\r\n");
            __builder.OpenElement(407, "div");
            __builder.AddAttribute(408, "class", "control-section");
            __builder.AddMarkupContent(409, "\r\n    <link href=\"https://cdn.syncfusion.com/ej2/17.2.46/material.css\" rel=\"stylesheet\">\r\n    <link href=\"https://ej2.syncfusion.com/javascript/demos/src/diagram/styles/diagram-common.css\" rel=\"stylesheet\">\r\n\r\n    ");
            __builder.OpenElement(410, "div");
            __builder.AddAttribute(411, "id", "diagram-space");
            __builder.AddAttribute(412, "class", "sb-mobile-diagram");
            __builder.AddMarkupContent(413, "\r\n\r\n        ");
            __builder.OpenComponent<Syncfusion.Blazor.Diagrams.Wasm.SfDiagramWasm>(414);
            __builder.AddAttribute(415, "ID", "diagram");
            __builder.AddAttribute(416, "Width", "700px");
            __builder.AddAttribute(417, "Height", "500px");
            __builder.AddAttribute(418, "Nodes", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Syncfusion.Blazor.Diagrams.Wasm.DiagramObjectCollection<Syncfusion.Blazor.Diagrams.Wasm.Node>>(
#nullable restore
#line 178 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\Port.razor"
                                                                                       NodeCollection

#line default
#line hidden
#nullable disable
            ));
            __builder.AddComponentReferenceCapture(419, (__value) => {
#nullable restore
#line 178 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\Port.razor"
                             diagram = (Syncfusion.Blazor.Diagrams.Wasm.SfDiagramWasm)__value;

#line default
#line hidden
#nullable disable
            }
            );
            __builder.CloseComponent();
            __builder.AddMarkupContent(420, "\r\n    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(421, "\r\n");
            __builder.CloseElement();
        }
        #pragma warning restore 1998
#nullable restore
#line 185 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\Port.razor"
     
    double offsetX = 0;
    double offsetY = 0;
    double opacity = 0;
    public string ID = "diagram";

    SfDiagramWasm diagram;

    public string Height { get; set; } = "700px";

    public DiagramObjectCollection<Node> NodeCollection
    {
        get;
        set;
    }

    //public DiagramObjectCollection<Connector> Connectors = new DiagramObjectCollection<Connector>();

    //public DiagramObjectCollection<NodeAnnotation> NodeAnnotations = new DiagramObjectCollection<NodeAnnotation>();

    //public DiagramObjectCollection<ConnectorAnnotation> ConnectorAnnotations = new DiagramObjectCollection<ConnectorAnnotation>();

    public DiagramObjectCollection<PointPort> NodePorts2 = new DiagramObjectCollection<PointPort>();

    protected override void OnInitialized()
    {

        NodePorts2 = new DiagramObjectCollection<PointPort>();

        PointPort port21 = new PointPort()
        {
            ID = "port21",
            Constraints = PortConstraints.Default | PortConstraints.Drag,
            Offset = new Point() { X = 0, Y = 0 },
            Height = 10,
            Width = 10,
            Visibility = PortVisibility.Visible,
            Style = new ShapeStyle() { Fill = "yellow", StrokeColor = "blue" }
        };
        NodePorts2.Add(port21);
        PointPort port22 = new PointPort()
        {
            ID = "port22",
            Offset = new Point() { X = 0.5, Y = 0.5 },
            Height = 10,
            Width = 10,
            Visibility = PortVisibility.Visible,
            Style = new ShapeStyle() { Fill = "yellow", StrokeColor = "blue" }
        };
        NodePorts2.Add(port22);
        PointPort port23 = new PointPort()
        {
            ID = "port23",
            Constraints = PortConstraints.Default | PortConstraints.Drag,
            Offset = new Point() { X = 1, Y = 0.5 },
            Height = 10,
            Width = 10,
            Visibility = PortVisibility.Visible,
            Style = new ShapeStyle() { Fill = "yellow", StrokeColor = "blue" }
        };
        NodePorts2.Add(port23);

        NodeCollection = new DiagramObjectCollection<Node>();

        Node node1 = new Node()
        {
            OffsetX = 300,
            OffsetY = 100,
            Height = 100,
            Width = 100,
            ID = "node1",
            //Ports = new DiagramObjectCollection<PointPort>()
            //{
            //    new PointPort()
            //    {
            //        ID="Default",
            //        Visibility = PortVisibility.Visible,
            //        Offset = new Point() { X = 1, Y = 0.5},
            //        Height = 20, Width = 20
            //    }
            //}
        };
        NodeCollection.Add(node1);

        //        Node node2 = new Node()
        //        {
        //            OffsetX = 200,
        //            OffsetY = 300,
        //            Height = 100,
        //            Width = 100,
        //            ID = "node2",
        //            Ports = new DiagramObjectCollection<PointPort>()
        //{
        //                new PointPort()
        //                {
        //                    ID="left",
        //                    Visibility = PortVisibility.Visible,
        //                    Offset = new Point() { X= 0, Y = 0.5}
        //                },
        //                new PointPort()
        //                {
        //                    ID="right",
        //                    Visibility = PortVisibility.Visible,
        //                    Offset = new Point() { X = 1, Y = 0.5}
        //                }
        //            }
        //        };
        //        NodeCollection.Add(node2);

        //        Node node3 = new Node()
        //        {
        //            OffsetX = 400,
        //            OffsetY = 300,
        //            Height = 100,
        //            Width = 100,
        //            ID = "node3",
        //            Ports = new DiagramObjectCollection<PointPort>()
        //{
        //                new PointPort()
        //                {
        //                    ID="left",
        //                    Visibility = PortVisibility.Visible,
        //                    Offset = new Point() { X= 0, Y = 0.5}
        //                },
        //                new PointPort()
        //                {
        //                    ID="right",
        //                    Visibility = PortVisibility.Visible,
        //                    Offset = new Point() { X = 1, Y = 0.5}
        //                }
        //            }
        //        };
        //        NodeCollection.Add(node3);

        //        Node node4 = new Node()
        //        {
        //            OffsetX = 300,
        //            OffsetY = 500,
        //            Height = 100,
        //            Width = 100,
        //            ID = "node4",
        //            Ports = NodePorts2
        //        };
        //        NodeCollection.Add(node4);

        //        Node node5 = new Node()
        //        {
        //            OffsetX = 700,
        //            OffsetY = 100,
        //            Height = 100,
        //            Width = 100,
        //            ID = "node5",
        //            Ports = new DiagramObjectCollection<PointPort>()
        //{
        //                new PointPort()
        //                {
        //                    ID="Default",
        //                    Visibility = PortVisibility.Visible,
        //                    Offset = new NodePortOffset() { X = 0, Y = 0.5},
        //                    Height = 20, Width = 20
        //                }
        //            }
        //        };
        //        NodeCollection.Add(node5);

        //        Node node6 = new Node()
        //        {
        //            OffsetX = 100,
        //            OffsetY = 100,
        //            Height = 100,
        //            Width = 100,
        //            ID = "node6",
        //            Ports = new DiagramObjectCollection<PointPort>()
        //{
        //                new PointPort()
        //                {
        //                    ID="Default",
        //                    Visibility = PortVisibility.Visible,
        //                    Height = 20,
        //                    Width = 20
        //                }
        //            }
        //        };
        //        NodeCollection.Add(node6);


        //        Connector connector = new Connector()
        //        {
        //            ID = "connector1",
        //            SourceID = "node2",
        //            TargetID = "node3",
        //            SourcePortID = "right",
        //            TargetPortID = "left",
        //            Annotations = ConnectorAnnotations
        //        };
        //        Connectors.Add(connector);
        //        Connector connector2 = new Connector()
        //        {
        //            ID = "connector2",
        //            SourcePoint = new ConnectorSourcePoint() { X = 500, Y = 100 },
        //            TargetPoint = new ConnectorTargetPoint() { X = 600, Y = 100 }

        //        };
        //        Connectors.Add(connector2);


    }

    public void SelectNode(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        //DiagramInteractionUtil.SelectNode(js, ID, (string)args.Value);
    }

    public void onInteraction(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        //DiagramInteractionUtil.Interaction(js, ID, (string)args.Value);
    }

    public void SelectConnector(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        //DiagramInteractionUtil.SelectConnector(js, ID, (string)args.Value);
    }

    public void dragPort()
    {
        //DiagramInteractionUtil.DragPort(js, ID, diagram.SelectedItems.Nodes[0].ID, 80, 70);
    }

    public void HoverConnector()
    {
        //DiagramInteractionUtil.MouseMove(js, ID, diagram.SelectedItems.Nodes[0].ID);
    }

    public void DragTargetEnd()
    {
        //DiagramInteractionUtil.DragTargetEnd(js, ID, "node5");
    }

    public void DragSourceEnd()
    {
        //DiagramInteractionUtil.DragSourceEnd(js, ID, "node1");
    }

    public void portVAlignment(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        string alignment = (string)args.Value;
        Node node = NodeCollection[0];
        //node.BeginUpdate();
        if (node.Ports.Count > 0)
        {
            switch (alignment)
            {
                case "Stretch":
                    node.Ports[0].VerticalAlignment = VerticalAlignment.Stretch;
                    break;
                case "Top":
                    node.Ports[0].VerticalAlignment = VerticalAlignment.Top;
                    break;
                case "Bottom":
                    node.Ports[0].VerticalAlignment = VerticalAlignment.Bottom;
                    break;
                case "Center":
                    node.Ports[0].VerticalAlignment = VerticalAlignment.Center;
                    break;
                case "Auto":
                    node.Ports[0].VerticalAlignment = VerticalAlignment.Auto;
                    break;
            }
            //node.EndUpdate();

        }

    }
    public void portFillColor(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        string alignment = (string)args.Value;
        Node node = NodeCollection[0];
        node.Ports[0].Style.Fill = alignment;
    }
    public void portStrokeColor(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        string alignment = (string)args.Value;
        Node node = NodeCollection[0];
        node.Ports[0].Style.StrokeColor = alignment;
    }
    public void portStrokeWidth(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        double val = double.Parse(args.Value.ToString());
        Node node = NodeCollection[0];
        node.Ports[0].Style.StrokeWidth = val;
    }
    public void portWidth(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        double val = double.Parse(args.Value.ToString());
        Node node = NodeCollection[0];
        node.Ports[0].Width = val;
    }
    public void portOpacity(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        double val = double.Parse(args.Value.ToString());
        Node node = NodeCollection[0];
        node.Ports[0].Style.Opacity = val;
        opacity = val;
    }
    public void portDashArray(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        string alignment = (string)args.Value;
        Node node = NodeCollection[0];
        node.Ports[0].Style.StrokeDashArray = alignment;
    }
    public void portHeight(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        double val = double.Parse(args.Value.ToString());
        Node node = NodeCollection[0];
        node.Ports[0].Height = val;
    }
    public void portHAlignment(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        string alignment = (string)args.Value;
        Node node = NodeCollection[0];
        //node.BeginUpdate();
        if (node.Ports.Count > 0)
        {
            switch (alignment)
            {
                case "Stretch":
                    node.Ports[0].HorizontalAlignment = HorizontalAlignment.Stretch;
                    break;
                case "Left":
                    node.Ports[0].HorizontalAlignment = HorizontalAlignment.Left;
                    break;
                case "Right":
                    node.Ports[0].HorizontalAlignment = HorizontalAlignment.Right;
                    break;
                case "Center":
                    node.Ports[0].HorizontalAlignment = HorizontalAlignment.Center;
                    break;
                case "Auto":
                    node.Ports[0].HorizontalAlignment = HorizontalAlignment.Auto;
                    break;
            }
            //node.EndUpdate();

        }

    }

    public void portShapes(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        string style = (string)args.Value;
        Node node = NodeCollection[0];
        if (node.Ports.Count > 0)
        {
            switch (style)
            {
                case "Circle":
                    node.Ports[0].Shape = PortShapes.Circle;
                    break;
                case "X":
                    node.Ports[0].Shape = PortShapes.X;
                    break;
                case "Custom":
                    diagram.BeginUpdate();
                    node.Ports[0].Shape = PortShapes.Custom;
                    node.Ports[0].PathData = "M10,19.707L0.293,10L10,0.293L19.707,10L10,19.707Z";
                    diagram.EndUpdate();
                    break;
                case "Square":
                    node.Ports[0].Shape = PortShapes.Square;
                    break;
            }
        }
    }

    public void portVisibility(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        string style = (string)args.Value;
        //string id = diagram.SelectedItems.Nodes[0].ID;
        Node node = diagram.Nodes[0];//.GetNode(id);
        if (node.Ports.Count > 0)
        {
            switch (style)
            {
                case "Visible":
                    node.Ports[0].Visibility = PortVisibility.Visible;
                    break;
                case "Hidden":
                    node.Ports[0].Visibility = PortVisibility.Hidden;
                    break;
                case "Hover":
                    node.Ports[0].Visibility = PortVisibility.Hover;
                    break;
                case "Connect":
                    node.Ports[0].Visibility = PortVisibility.Connect;
                    break;
            }
        }
    }

    public void PortOffsetXChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        double val = double.Parse(args.Value.ToString());
        NodeCollection[0].Ports[0].Offset = new Point() { X = val, Y = NodeCollection[0].Ports[0].Offset.Y };
        offsetX = val;
    }

    public void PortOffsetYChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        double val = double.Parse(args.Value.ToString());
        NodeCollection[0].Ports[0].Offset = new Point() { X = NodeCollection[0].Ports[0].Offset.X, Y = val };
        offsetY = val;
    }
    public void ConstraintsNone(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        //string id = diagram.SelectedItems.Nodes[0].ID;
        Node node = diagram.Nodes[0];//.GetNode(id);

        if (node.Ports.Count > 0)
        {
            if (args.Checked)
            {
                node.Ports[0].Constraints = PortConstraints.None;
            }
            else
            {
                node.Ports[0].Constraints = PortConstraints.Default;
            }
        }
    }

    public void ConstraintsDrag(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        //string id = diagram.SelectedItems.Nodes[0].ID;
        Node node = diagram.Nodes[0];//.GetNode(id);

        if (node.Ports.Count > 0)
        {
            if (args.Checked)
            {
                node.Ports[0].Constraints = PortConstraints.Drag;
            }
            else
            {
                node.Ports[0].Constraints &= ~PortConstraints.Drag;
            }
        }
    }

    public void ConstraintsDraw(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        //string id = diagram.SelectedItems.Nodes[0].ID;
        Node node = diagram.Nodes[0];//.GetNode(id);

        if (node.Ports.Count > 0)
        {
            if (args.Checked)
            {
                node.Ports[0].Constraints = PortConstraints.Draw;
            }
            else
            {
                node.Ports[0].Constraints &= ~PortConstraints.Draw;
            }
        }
    }

    public void ConstraintsInconnect(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        //string id = diagram.SelectedItems.Nodes[0].ID;
        Node node = diagram.Nodes[0];//.GetNode(id);

        if (node.Ports.Count > 0)
        {
            if (args.Checked)
            {
                node.Ports[0].Constraints = PortConstraints.InConnect;
            }
            else
            {
                node.Ports[0].Constraints &= ~PortConstraints.InConnect;
            }
        }
    }

    public void ConstraintsOutConnect(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        //string id = diagram.SelectedItems.Nodes[0].ID;
        Node node = diagram.Nodes[0];//.GetNode(id);

        if (node.Ports.Count > 0)
        {
            if (args.Checked)
            {
                node.Ports[0].Constraints = PortConstraints.OutConnect;
            }
            else
            {
                node.Ports[0].Constraints &= ~PortConstraints.OutConnect;
            }
        }
    }

    public void ConstraintsDefault(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        //string id = diagram.SelectedItems.Nodes[0].ID;
        Node node = diagram.Nodes[0];//.GetNode(id);


        if (node.Ports.Count > 0)
        {
            if (args.Checked)
            {
                node.Ports[0].Constraints = PortConstraints.Default;
            }
            else
            {
                node.Ports[0].Constraints = PortConstraints.None;
            }
        }
    }



    public void AddPort()
    {

        PointPort annotation = new PointPort() { Visibility = PortVisibility.Visible, Offset = new Point() { X = 0.5, Y = 1.3 } };
        NodeCollection[0].Ports.Add(annotation);

    }

    public void RemovePort()
    {
        NodeCollection[0].Ports.Remove(NodeCollection[0].Ports[0]);
    }

    public async void OnUndo()
    {
        //await diagram.Undo();
    }

    public async void OnRedo()
    {
        //await diagram.Redo();
    }

    public async void Cut()
    {
        //await diagram.Cut();
    }

    public async void Copy()
    {
        //await diagram.Copy();
    }

    public async void Paste()
    {
        //await diagram.Paste();
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
    }
}
#pragma warning restore 1591
