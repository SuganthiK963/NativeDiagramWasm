// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace WasmNativeImplementation.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using WasmNativeImplementation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using WasmNativeImplementation.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\PortSample1.razor"
using Syncfusion.Blazor.Diagrams.Wasm;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\PortSample1.razor"
using System.Collections.ObjectModel;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/PortSample1")]
    public partial class PortSample1 : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 186 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\PortSample1.razor"
     
    double offsetX = 0;
    double offsetY = 0;
    double opacity = 0;
    public string ID = "diagram";

    SfDiagramWasm diagram;

    public string Height { get; set; } = "700px";

    public DiagramObjectCollection<Node> NodeCollection
    {
        get;
        set;
    }

    //public DiagramObjectCollection<Connector> Connectors = new DiagramObjectCollection<Connector>();

    //public DiagramObjectCollection<NodeAnnotation> NodeAnnotations = new DiagramObjectCollection<NodeAnnotation>();

    //public DiagramObjectCollection<ConnectorAnnotation> ConnectorAnnotations = new DiagramObjectCollection<ConnectorAnnotation>();

    public DiagramObjectCollection<PointPort> NodePorts2 = new DiagramObjectCollection<PointPort>();

    protected override void OnInitialized()
    {

        NodePorts2 = new DiagramObjectCollection<PointPort>();

        PointPort port21 = new PointPort()
        {
            ID = "port21",
            Constraints = PortConstraints.Default | PortConstraints.Drag,
            Offset = new Point() { X = 0, Y = 0 },
            Height = 10,
            Width = 10,
            Visibility = PortVisibility.Visible,
            Style = new ShapeStyle() { Fill = "yellow", StrokeColor = "blue" }
        };
        NodePorts2.Add(port21);
        PointPort port22 = new PointPort()
        {
            ID = "port22",
            Offset = new Point() { X = 0.5, Y = 0.5 },
            Height = 10,
            Width = 10,
            Visibility = PortVisibility.Visible,
            Style = new ShapeStyle() { Fill = "yellow", StrokeColor = "blue" }
        };
        NodePorts2.Add(port22);
        PointPort port23 = new PointPort()
        {
            ID = "port23",
            Constraints = PortConstraints.Default | PortConstraints.Drag,
            Offset = new Point() { X = 1, Y = 0.5 },
            Height = 10,
            Width = 10,
            Visibility = PortVisibility.Visible,
            Style = new ShapeStyle() { Fill = "yellow", StrokeColor = "blue" }
        };
        NodePorts2.Add(port23);

        NodeCollection = new DiagramObjectCollection<Node>();

        Node node1 = new Node()
        {
            OffsetX = 300,
            OffsetY = 100,
            Height = 100,
            Width = 100,
            ID = "node1",
            Ports = new DiagramObjectCollection<PointPort>()
            {
                new PointPort()
                {
                    ID="Default",
                    Visibility = PortVisibility.Visible,
                    Offset = new Point() { X = 1, Y = 0.5},
                    Height = 20, Width = 20
                },

                new PointPort()
                {
                    ID="Port2",
                    Visibility = PortVisibility.Visible,
                    Offset = new Point() { X = 0, Y = 0.5},
                    Height = 20, Width = 20
                },

                new PointPort()
                {
                    ID="Port3",
                    Visibility = PortVisibility.Visible,
                    Offset = new Point() { X = 1, Y = 0},
                    Height = 20, Width = 20
                },

                new PointPort()
                {
                    ID="Port4",
                    Visibility = PortVisibility.Visible,
                    Offset = new Point() { X = 0, Y = 1},
                    Height = 20, Width = 20
                }
            }
        };
        NodeCollection.Add(node1);

        //        Node node2 = new Node()
        //        {
        //            OffsetX = 200,
        //            OffsetY = 300,
        //            Height = 100,
        //            Width = 100,
        //            ID = "node2",
        //            Ports = new DiagramObjectCollection<PointPort>()
        //{
        //                new PointPort()
        //                {
        //                    ID="left",
        //                    Visibility = PortVisibility.Visible,
        //                    Offset = new Point() { X= 0, Y = 0.5}
        //                },
        //                new PointPort()
        //                {
        //                    ID="right",
        //                    Visibility = PortVisibility.Visible,
        //                    Offset = new Point() { X = 1, Y = 0.5}
        //                }
        //            }
        //        };
        //        NodeCollection.Add(node2);

        //        Node node3 = new Node()
        //        {
        //            OffsetX = 400,
        //            OffsetY = 300,
        //            Height = 100,
        //            Width = 100,
        //            ID = "node3",
        //            Ports = new DiagramObjectCollection<PointPort>()
        //{
        //                new PointPort()
        //                {
        //                    ID="left",
        //                    Visibility = PortVisibility.Visible,
        //                    Offset = new Point() { X= 0, Y = 0.5}
        //                },
        //                new PointPort()
        //                {
        //                    ID="right",
        //                    Visibility = PortVisibility.Visible,
        //                    Offset = new Point() { X = 1, Y = 0.5}
        //                }
        //            }
        //        };
        //        NodeCollection.Add(node3);

        //        Node node4 = new Node()
        //        {
        //            OffsetX = 300,
        //            OffsetY = 500,
        //            Height = 100,
        //            Width = 100,
        //            ID = "node4",
        //            Ports = NodePorts2
        //        };
        //        NodeCollection.Add(node4);

        //        Node node5 = new Node()
        //        {
        //            OffsetX = 700,
        //            OffsetY = 100,
        //            Height = 100,
        //            Width = 100,
        //            ID = "node5",
        //            Ports = new DiagramObjectCollection<PointPort>()
        //{
        //                new PointPort()
        //                {
        //                    ID="Default",
        //                    Visibility = PortVisibility.Visible,
        //                    Offset = new NodePortOffset() { X = 0, Y = 0.5},
        //                    Height = 20, Width = 20
        //                }
        //            }
        //        };
        //        NodeCollection.Add(node5);

        //        Node node6 = new Node()
        //        {
        //            OffsetX = 100,
        //            OffsetY = 100,
        //            Height = 100,
        //            Width = 100,
        //            ID = "node6",
        //            Ports = new DiagramObjectCollection<PointPort>()
        //{
        //                new PointPort()
        //                {
        //                    ID="Default",
        //                    Visibility = PortVisibility.Visible,
        //                    Height = 20,
        //                    Width = 20
        //                }
        //            }
        //        };
        //        NodeCollection.Add(node6);


        //        Connector connector = new Connector()
        //        {
        //            ID = "connector1",
        //            SourceID = "node2",
        //            TargetID = "node3",
        //            SourcePortID = "right",
        //            TargetPortID = "left",
        //            Annotations = ConnectorAnnotations
        //        };
        //        Connectors.Add(connector);
        //        Connector connector2 = new Connector()
        //        {
        //            ID = "connector2",
        //            SourcePoint = new ConnectorSourcePoint() { X = 500, Y = 100 },
        //            TargetPoint = new ConnectorTargetPoint() { X = 600, Y = 100 }

        //        };
        //        Connectors.Add(connector2);


    }

    public void SelectNode(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        //DiagramInteractionUtil.SelectNode(js, ID, (string)args.Value);
    }

    public void onInteraction(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        //DiagramInteractionUtil.Interaction(js, ID, (string)args.Value);
    }

    public void SelectConnector(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        //DiagramInteractionUtil.SelectConnector(js, ID, (string)args.Value);
    }

    public void dragPort()
    {
        //DiagramInteractionUtil.DragPort(js, ID, diagram.SelectedItems.Nodes[0].ID, 80, 70);
    }

    public void HoverConnector()
    {
        //DiagramInteractionUtil.MouseMove(js, ID, diagram.SelectedItems.Nodes[0].ID);
    }

    public void DragTargetEnd()
    {
        //DiagramInteractionUtil.DragTargetEnd(js, ID, "node5");
    }

    public void DragSourceEnd()
    {
        //DiagramInteractionUtil.DragSourceEnd(js, ID, "node1");
    }

    public void portVAlignment(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        string alignment = (string)args.Value;
        Node node = NodeCollection[0];
        //node.BeginUpdate();
        if (node.Ports.Count > 0)
        {
            switch (alignment)
            {
                case "Stretch":
                    node.Ports[0].VerticalAlignment = VerticalAlignment.Stretch;
                    break;
                case "Top":
                    node.Ports[0].VerticalAlignment = VerticalAlignment.Top;
                    break;
                case "Bottom":
                    node.Ports[0].VerticalAlignment = VerticalAlignment.Bottom;
                    break;
                case "Center":
                    node.Ports[0].VerticalAlignment = VerticalAlignment.Center;
                    break;
                case "Auto":
                    node.Ports[0].VerticalAlignment = VerticalAlignment.Auto;
                    break;
            }
            //node.EndUpdate();

        }

    }
    public void portFillColor(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        string alignment = (string)args.Value;
        Node node = NodeCollection[0];
        node.Ports[0].Style.Fill = alignment;
    }
    public void portStrokeColor(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        string alignment = (string)args.Value;
        Node node = NodeCollection[0];
        node.Ports[0].Style.StrokeColor = alignment;
    }
    public void portStrokeWidth(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        double val = double.Parse(args.Value.ToString());
        Node node = NodeCollection[0];
        node.Ports[0].Style.StrokeWidth = val;
    }
    public void portWidth(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        double val = double.Parse(args.Value.ToString());
        Node node = NodeCollection[0];
        node.Ports[0].Width = val;
    }
    public void portOpacity(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        double val = double.Parse(args.Value.ToString());
        Node node = NodeCollection[0];
        node.Ports[0].Style.Opacity = val;
        opacity = val;
    }
    public void portDashArray(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        string alignment = (string)args.Value;
        Node node = NodeCollection[0];
        node.Ports[0].Style.StrokeDashArray = alignment;
    }
    public void portHeight(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        double val = double.Parse(args.Value.ToString());
        Node node = NodeCollection[0];
        node.Ports[0].Height = val;
    }
    public void portHAlignment(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        string alignment = (string)args.Value;
        Node node = NodeCollection[0];
        //node.BeginUpdate();
        if (node.Ports.Count > 0)
        {
            switch (alignment)
            {
                case "Stretch":
                    node.Ports[0].HorizontalAlignment = HorizontalAlignment.Stretch;
                    break;
                case "Left":
                    node.Ports[0].HorizontalAlignment = HorizontalAlignment.Left;
                    break;
                case "Right":
                    node.Ports[0].HorizontalAlignment = HorizontalAlignment.Right;
                    break;
                case "Center":
                    node.Ports[0].HorizontalAlignment = HorizontalAlignment.Center;
                    break;
                case "Auto":
                    node.Ports[0].HorizontalAlignment = HorizontalAlignment.Auto;
                    break;
            }
            //node.EndUpdate();

        }

    }

    public void portShapes(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        string style = (string)args.Value;
        Node node = NodeCollection[0];
        if (node.Ports.Count > 0)
        {
            switch (style)
            {
                case "Circle":
                    node.Ports[0].Shape = PortShapes.Circle;
                    break;
                case "X":
                    node.Ports[0].Shape = PortShapes.X;
                    break;
                case "Custom":
                    diagram.BeginUpdate();
                    node.Ports[0].Shape = PortShapes.Custom;
                    node.Ports[0].PathData = "M10,19.707L0.293,10L10,0.293L19.707,10L10,19.707Z";
                    diagram.EndUpdate();
                    break;
                case "Square":
                    node.Ports[0].Shape = PortShapes.Square;
                    break;
            }
        }
    }

    public void portVisibility(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        string style = (string)args.Value;
        //string id = diagram.SelectedItems.Nodes[0].ID;
        Node node = diagram.Nodes[0];//.GetNode(id);
        if (node.Ports.Count > 0)
        {
            switch (style)
            {
                case "Visible":
                    node.Ports[0].Visibility = PortVisibility.Visible;
                    break;
                case "Hidden":
                    node.Ports[0].Visibility = PortVisibility.Hidden;
                    break;
                case "Hover":
                    node.Ports[0].Visibility = PortVisibility.Hover;
                    break;
                case "Connect":
                    node.Ports[0].Visibility = PortVisibility.Connect;
                    break;
            }
        }
    }

    public void PortOffsetXChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        double val = double.Parse(args.Value.ToString());
        NodeCollection[0].Ports[0].Offset = new Point() { X = val, Y = NodeCollection[0].Ports[0].Offset.Y };
        offsetX = val;
    }

    public void PortOffsetYChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        double val = double.Parse(args.Value.ToString());
        NodeCollection[0].Ports[0].Offset = new Point() { X = NodeCollection[0].Ports[0].Offset.X, Y = val };
        offsetY = val;
    }
    public void ConstraintsNone(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        //string id = diagram.SelectedItems.Nodes[0].ID;
        Node node = diagram.Nodes[0];//.GetNode(id);

        if (node.Ports.Count > 0)
        {
            if (args.Checked)
            {
                node.Ports[0].Constraints = PortConstraints.None;
            }
            else
            {
                node.Ports[0].Constraints = PortConstraints.Default;
            }
        }
    }

    public void ConstraintsDrag(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        //string id = diagram.SelectedItems.Nodes[0].ID;
        Node node = diagram.Nodes[0];//.GetNode(id);

        if (node.Ports.Count > 0)
        {
            if (args.Checked)
            {
                node.Ports[0].Constraints = PortConstraints.Drag;
            }
            else
            {
                node.Ports[0].Constraints &= ~PortConstraints.Drag;
            }
        }
    }

    public void ConstraintsDraw(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        //string id = diagram.SelectedItems.Nodes[0].ID;
        Node node = diagram.Nodes[0];//.GetNode(id);

        if (node.Ports.Count > 0)
        {
            if (args.Checked)
            {
                node.Ports[0].Constraints = PortConstraints.Draw;
            }
            else
            {
                node.Ports[0].Constraints &= ~PortConstraints.Draw;
            }
        }
    }

    public void ConstraintsInconnect(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        //string id = diagram.SelectedItems.Nodes[0].ID;
        Node node = diagram.Nodes[0];//.GetNode(id);

        if (node.Ports.Count > 0)
        {
            if (args.Checked)
            {
                node.Ports[0].Constraints = PortConstraints.InConnect;
            }
            else
            {
                node.Ports[0].Constraints &= ~PortConstraints.InConnect;
            }
        }
    }

    public void ConstraintsOutConnect(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        //string id = diagram.SelectedItems.Nodes[0].ID;
        Node node = diagram.Nodes[0];//.GetNode(id);

        if (node.Ports.Count > 0)
        {
            if (args.Checked)
            {
                node.Ports[0].Constraints = PortConstraints.OutConnect;
            }
            else
            {
                node.Ports[0].Constraints &= ~PortConstraints.OutConnect;
            }
        }
    }

    public void ConstraintsDefault(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        //string id = diagram.SelectedItems.Nodes[0].ID;
        Node node = diagram.Nodes[0];//.GetNode(id);


        if (node.Ports.Count > 0)
        {
            if (args.Checked)
            {
                node.Ports[0].Constraints = PortConstraints.Default;
            }
            else
            {
                node.Ports[0].Constraints = PortConstraints.None;
            }
        }
    }



    public void AddPort()
    {

        PointPort annotation = new PointPort() { Visibility = PortVisibility.Visible, Offset = new Point() { X = 0.5, Y = 1.3 } };
        NodeCollection[0].Ports.Add(annotation);

    }

    public void RemovePort()
    {
        NodeCollection[0].Ports.Remove(NodeCollection[0].Ports[0]);
    }

    public async void UpdatePathData()
    {
        NodeCollection[0].Ports[0].Shape = PortShapes.Custom;
        //NodeCollection[0].Ports[1].Shape = PortShapes.Custom;
        NodeCollection[0].Ports[0].PathData = "M 355.31 12.07 C 352.11 5.95 345.35 -1.14 331.41 0.15 C 290.33 3.93 209.61 81.48 190.42 111.69 C 189.66 107.76 187.9 101.49 184.12 98.05 C 189.5 87.75 198.01 69.64 201.57 52.48 C 202.4 52.26 203.12 51.68 203.34 50.44 C 203.72 48.34 204 46.22 204.39 44.13 C 205.01 40.62 199.99 39.43 199.42 42.91 C 199.06 45.06 198.69 47.15 198.35 49.31 C 198.16 50.6 198.69 51.62 199.54 52.14 C 196.08 68.87 187.75 86.63 182.43 96.81 C 181.52 96.29 180.53 95.87 179.41 95.7 C 179.09 95.65 178.8 95.72 178.5 95.71 C 178.19 95.72 177.91 95.65 177.59 95.7 C 176.46 95.87 175.48 96.29 174.56 96.81 C 169.24 86.63 160.92 68.87 157.46 52.14 C 158.3 51.62 158.83 50.6 158.65 49.31 C 158.3 47.15 157.93 45.06 157.58 42.91 C 157.01 39.43 151.99 40.62 152.61 44.13 C 152.99 46.22 153.28 48.34 153.66 50.44 C 153.87 51.68 154.6 52.27 155.42 52.48 C 158.98 69.63 167.49 87.75 172.87 98.05 C 169.09 101.49 167.33 107.76 166.57 111.69 C 147.39 81.48 66.67 3.93 25.59 0.15 C 11.65 -1.14 4.89 5.95 1.69 12.07 C -2.05 19.07 0.84 33.48 6.24 58.46 C 8.66 69.55 11.16 80.96 12.94 92.2 C 13.89 98.36 14.79 104.49 15.64 110.36 C 19.39 136.89 22.52 158.97 32.64 166.04 C 35.41 167.98 38.65 168.78 42.61 168.24 C 52.26 165.95 63.79 164.03 75.99 162.67 C 64.03 171.47 49.08 185.81 44.17 204.84 C 40.38 219.72 43.37 234.86 53.01 250.05 C 64.37 267.81 76.02 279.48 86.91 287.09 C 108.68 302.31 127.52 301.24 135.48 300.78 C 136.3 300.77 136.94 300.71 137.56 300.69 C 143.62 300.61 147.76 291.39 156.6 270.51 C 160.94 260.34 167.39 245.19 172.83 237.47 C 173.97 240.31 177.22 242.31 178.92 242.87 C 178.78 242.94 178.62 243.07 178.49 243.12 C 178.65 243.08 178.83 242.97 179 242.91 C 179.1 242.94 179.25 243.02 179.34 243.04 C 179.26 243.01 179.13 242.93 179.04 242.89 C 180.83 242.24 183.05 240.25 184.16 237.48 C 189.6 245.19 196.05 260.34 200.39 270.52 C 209.23 291.4 213.38 300.61 219.43 300.7 C 220.05 300.72 220.69 300.77 221.51 300.78 C 229.47 301.25 248.31 302.31 270.08 287.1 C 280.97 279.49 292.62 267.81 303.98 250.05 C 313.62 234.86 316.6 219.72 312.82 204.84 C 307.91 185.82 292.96 171.48 281 162.67 C 293.2 164.03 304.73 165.95 314.38 168.24 C 318.34 168.78 321.58 167.98 324.35 166.04 C 334.47 158.97 337.6 136.89 341.35 110.37 C 342.19 104.49 343.1 98.37 344.05 92.2 C 345.83 80.96 348.33 69.55 350.75 58.46 C 356.16 33.48 359.05 19.07 355.31 12.07 z M 183.92 237.56 C 182.35 240.3 180.35 242.13 178.97 242.86 C 177.49 242.19 174.7 240.38 173.08 237.56 C 173.08 237.56 166.19 138.22 166.91 113.58 C 166.91 113.58 169.24 97.92 178.5 97.81 C 187.76 97.92 190.09 113.58 190.09 113.58 C 190.81 138.22 183.92 237.56 183.92 237.56 z";
        //NodeCollection[0].Ports[1].PathData = "M0,50 a1,1 0 0,0 100,0";
        StateHasChanged();
    }

    public async void UpdatePathData1()
    {
        diagram.BeginUpdate();
        NodeCollection[0].Ports[2].Shape = PortShapes.Custom;
        NodeCollection[0].Ports[3].Shape = PortShapes.Custom;
        NodeCollection[0].Ports[2].PathData = "M 355.31 12.07 C 352.11 5.95 345.35 -1.14 331.41 0.15 C 290.33 3.93 209.61 81.48 190.42 111.69 C 189.66 107.76 187.9 101.49 184.12 98.05 C 189.5 87.75 198.01 69.64 201.57 52.48 C 202.4 52.26 203.12 51.68 203.34 50.44 C 203.72 48.34 204 46.22 204.39 44.13 C 205.01 40.62 199.99 39.43 199.42 42.91 C 199.06 45.06 198.69 47.15 198.35 49.31 C 198.16 50.6 198.69 51.62 199.54 52.14 C 196.08 68.87 187.75 86.63 182.43 96.81 C 181.52 96.29 180.53 95.87 179.41 95.7 C 179.09 95.65 178.8 95.72 178.5 95.71 C 178.19 95.72 177.91 95.65 177.59 95.7 C 176.46 95.87 175.48 96.29 174.56 96.81 C 169.24 86.63 160.92 68.87 157.46 52.14 C 158.3 51.62 158.83 50.6 158.65 49.31 C 158.3 47.15 157.93 45.06 157.58 42.91 C 157.01 39.43 151.99 40.62 152.61 44.13 C 152.99 46.22 153.28 48.34 153.66 50.44 C 153.87 51.68 154.6 52.27 155.42 52.48 C 158.98 69.63 167.49 87.75 172.87 98.05 C 169.09 101.49 167.33 107.76 166.57 111.69 C 147.39 81.48 66.67 3.93 25.59 0.15 C 11.65 -1.14 4.89 5.95 1.69 12.07 C -2.05 19.07 0.84 33.48 6.24 58.46 C 8.66 69.55 11.16 80.96 12.94 92.2 C 13.89 98.36 14.79 104.49 15.64 110.36 C 19.39 136.89 22.52 158.97 32.64 166.04 C 35.41 167.98 38.65 168.78 42.61 168.24 C 52.26 165.95 63.79 164.03 75.99 162.67 C 64.03 171.47 49.08 185.81 44.17 204.84 C 40.38 219.72 43.37 234.86 53.01 250.05 C 64.37 267.81 76.02 279.48 86.91 287.09 C 108.68 302.31 127.52 301.24 135.48 300.78 C 136.3 300.77 136.94 300.71 137.56 300.69 C 143.62 300.61 147.76 291.39 156.6 270.51 C 160.94 260.34 167.39 245.19 172.83 237.47 C 173.97 240.31 177.22 242.31 178.92 242.87 C 178.78 242.94 178.62 243.07 178.49 243.12 C 178.65 243.08 178.83 242.97 179 242.91 C 179.1 242.94 179.25 243.02 179.34 243.04 C 179.26 243.01 179.13 242.93 179.04 242.89 C 180.83 242.24 183.05 240.25 184.16 237.48 C 189.6 245.19 196.05 260.34 200.39 270.52 C 209.23 291.4 213.38 300.61 219.43 300.7 C 220.05 300.72 220.69 300.77 221.51 300.78 C 229.47 301.25 248.31 302.31 270.08 287.1 C 280.97 279.49 292.62 267.81 303.98 250.05 C 313.62 234.86 316.6 219.72 312.82 204.84 C 307.91 185.82 292.96 171.48 281 162.67 C 293.2 164.03 304.73 165.95 314.38 168.24 C 318.34 168.78 321.58 167.98 324.35 166.04 C 334.47 158.97 337.6 136.89 341.35 110.37 C 342.19 104.49 343.1 98.37 344.05 92.2 C 345.83 80.96 348.33 69.55 350.75 58.46 C 356.16 33.48 359.05 19.07 355.31 12.07 z M 183.92 237.56 C 182.35 240.3 180.35 242.13 178.97 242.86 C 177.49 242.19 174.7 240.38 173.08 237.56 C 173.08 237.56 166.19 138.22 166.91 113.58 C 166.91 113.58 169.24 97.92 178.5 97.81 C 187.76 97.92 190.09 113.58 190.09 113.58 C 190.81 138.22 183.92 237.56 183.92 237.56 z";
        NodeCollection[0].Ports[3].PathData = "M0,50 a1,1 0 0,0 100,0";
        diagram.EndUpdate();
    }

    public async void Cut()
    {
        //await diagram.Cut();
    }

    public async void Copy()
    {
        //await diagram.Copy();
    }

    public async void Paste()
    {
        //await diagram.Paste();
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
    }
}
#pragma warning restore 1591
