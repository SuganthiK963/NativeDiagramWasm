// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace WasmNativeImplementation.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
#nullable restore
#line 1 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using WasmNativeImplementation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\_Imports.razor"
using WasmNativeImplementation.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\DecoratorPropertyChange.razor"
using Syncfusion.Blazor.Diagrams.Wasm;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\DecoratorPropertyChange.razor"
using System.Collections.ObjectModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\DecoratorPropertyChange.razor"
using Microsoft.AspNetCore.Components;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/DecoratorPropertyChange")]
    public partial class DecoratorPropertyChange : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 220 "D:\Diagram Blazor\GitHub\NativeDiagramWasm\Pages\DecoratorPropertyChange.razor"
      

    SfDiagramWasm diagram;

    DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();

    DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();

    protected override void OnInitialized()
    {
        nodes.Add(new Node()
        {
            ID = "node1",
            OffsetX = 100,
            OffsetY = 300,
            Width = 100,
            Height = 100,
            Ports = new DiagramObjectCollection<PointPort>()
                    {
                        new PointPort()
                        {
                            ID="port1", Visibility = PortVisibility.Visible, Offset = new Point() { X = 0, Y = 0.5 }, Shape = PortShapes.Circle,
                        },
                        new PointPort()
                        {
                            ID="port2", Visibility = PortVisibility.Visible, Offset = new Point() { X = 0.5, Y = 0 }, Shape = PortShapes.Circle,
                        },
                        new PointPort()
                        {
                            ID="port3", Visibility = PortVisibility.Visible, Offset = new Point() { X = 1, Y = 0.5 }, Shape = PortShapes.Circle,
                        },
                        new PointPort()
                        {
                            ID="port4", Visibility = PortVisibility.Visible, Offset = new Point() { X = 0.5, Y = 1 }, Shape = PortShapes.Circle,
                        },
                    }
        });
        nodes.Add(new Node()
        {
            ID = "node2",
            OffsetX = 300,
            OffsetY = 400,
            Width = 100,
            Height = 100,
            Ports = new DiagramObjectCollection<PointPort>()
                    {
                        new PointPort()
                        {
                            ID="port1", Visibility = PortVisibility.Visible, Offset = new Point() { X = 0, Y = 0.5 }, Shape = PortShapes.Circle,
                        },
                        new PointPort()
                        {
                            ID="port2", Visibility = PortVisibility.Visible, Offset = new Point() { X = 0.5, Y = 0 }, Shape = PortShapes.Circle,
                        },
                        new PointPort()
                        {
                            ID="port3", Visibility = PortVisibility.Visible, Offset = new Point() { X = 1, Y = 0.5 }, Shape = PortShapes.Circle,
                        },
                        new PointPort()
                        {
                            ID="port4", Visibility = PortVisibility.Visible, Offset = new Point() { X = 0.5, Y = 1 }, Shape = PortShapes.Circle,
                        },
                    }
        });
        nodes.Add(new Node()
        {
            ID = "node3",
            OffsetX = 500,
            OffsetY = 300,
            Width = 100,
            Height = 100,
            Ports = new DiagramObjectCollection<PointPort>()
                    {
                        new PointPort()
                        {
                            ID="port1", Visibility = PortVisibility.Visible, Offset = new Point() { X = 0, Y = 0.5 }, Shape = PortShapes.Circle,
                        },
                        new PointPort()
                        {
                            ID="port2", Visibility = PortVisibility.Visible, Offset = new Point() { X = 0.5, Y = 0 }, Shape = PortShapes.Circle,
                        },
                        new PointPort()
                        {
                            ID="port3", Visibility = PortVisibility.Visible, Offset = new Point() { X = 1, Y = 0.5 }, Shape = PortShapes.Circle,
                        },
                        new PointPort()
                        {
                            ID="port4", Visibility = PortVisibility.Visible, Offset = new Point() { X = 0.5, Y = 1 }, Shape = PortShapes.Circle,
                        },
                    }
        });
        nodes.Add(new Node()
        {
            ID = "node4",
            OffsetX = 700,
            OffsetY = 400,
            Width = 100,
            Height = 100,
            Ports = new DiagramObjectCollection<PointPort>()
                    {
                        new PointPort()
                        {
                            ID="port1", Visibility = PortVisibility.Visible, Offset = new Point() { X = 0, Y = 0.5 }, Shape = PortShapes.Circle,
                        },
                        new PointPort()
                        {
                            ID="port2", Visibility = PortVisibility.Visible, Offset = new Point() { X = 0.5, Y = 0 }, Shape = PortShapes.Circle,
                        },
                        new PointPort()
                        {
                            ID="port3", Visibility = PortVisibility.Visible, Offset = new Point() { X = 1, Y = 0.5 }, Shape = PortShapes.Circle,
                        },
                        new PointPort()
                        {
                            ID="port4", Visibility = PortVisibility.Visible, Offset = new Point() { X = 0.5, Y = 1 }, Shape = PortShapes.Circle,
                        },
                    }
        });


        Connector connector1 = new Connector() { ID = "connector1", SourcePoint = new Point() { X = 100, Y = 10 }, TargetPoint = new Point() { X = 200, Y = 100 }, Type = Segments.Straight };
        connectors.Add(connector1);

        Connector connector2 = new Connector() { ID = "connector2", SourcePoint = new Point() { X = 300, Y = 10 }, TargetPoint = new Point() { X = 400, Y = 100 }, Type = Segments.Orthogonal };
        connectors.Add(connector2);

        Connector connector3 = new Connector() { ID = "connector3", SourcePoint = new Point() { X = 500, Y = 10 }, TargetPoint = new Point() { X = 600, Y = 100 }, Type = Segments.Bezier };
        connectors.Add(connector3);

        Connector connector4 = new Connector() { ID = "connector4", SourceID = "node1", TargetID = "node2", Type = Segments.Straight };
        connectors.Add(connector4);

        Connector connector5 = new Connector() { ID = "connector5", SourceID = "node2", TargetID = "node3", Type = Segments.Orthogonal };
        connectors.Add(connector5);

        Connector connector6 = new Connector() { ID = "connector6", SourceID = "node3", TargetID = "node4", Type = Segments.Bezier };
        connectors.Add(connector6);

        Connector connector7 = new Connector() { ID = "connector7", SourceID = "node1", TargetID = "node2", Type = Segments.Straight, SourcePortID = "port1", TargetPortID = "port1" };
        connectors.Add(connector7);

        Connector connector8 = new Connector() { ID = "connector8", SourceID = "node2", TargetID = "node3", Type = Segments.Orthogonal, SourcePortID = "port1", TargetPortID = "port1" };
        connectors.Add(connector8);

        Connector connector9 = new Connector() { ID = "connector9", SourceID = "node3", TargetID = "node4", Type = Segments.Bezier, SourcePortID = "port1", TargetPortID = "port1" };
        connectors.Add(connector9);

    }

    Connector connector;

    private void BeginUpdate()
    {
        diagram.BeginUpdate();
    }

    private void EndUpdate()
    {
        diagram.EndUpdate();
    }

    private void OnSelectConnector(ChangeEventArgs args)
    {
        int index = int.Parse(args.Value.ToString());
        connector = connectors[index];
    }

    private void OnSourcePointXChange(ChangeEventArgs args)
    {
        connector.SourcePoint.X = double.Parse(args.Value.ToString());
    }

    private void OnSourcePointYChange(ChangeEventArgs args)
    {
        connector.SourcePoint = new Point { Y = double.Parse(args.Value.ToString()), X = connector.SourcePoint.X };
    }

    private void OnTargetPointXChange(ChangeEventArgs args)
    {
        connector.TargetPoint = new Point { X = double.Parse(args.Value.ToString()), Y = connector.SourcePoint.Y };
    }

    private void OnTargetPointYChange(ChangeEventArgs args)
    {
        connector.TargetPoint.Y = double.Parse(args.Value.ToString());
    }

    private void OnSourceIDChange(ChangeEventArgs args)
    {
        string val = args.Value.ToString();
        connector.SourceID = val == "Empty string" ? string.Empty: val;
    }


    private void OnSourcePortIDChange(ChangeEventArgs args)
    {
        string val = args.Value.ToString();
        connector.SourcePortID = val == "Empty string" ? string.Empty : val;
    }


    private void OnTargetIDChange(ChangeEventArgs args)
    {
        string val = args.Value.ToString();
        connector.TargetID = val == "Empty string" ? string.Empty : val;
    }


    private void OnTargetPortIDChange(ChangeEventArgs args)
    {
        string val = args.Value.ToString();
        connector.TargetPortID = val == "Empty string" ? string.Empty : val;
    }

    Decorator decorator;

    private void OnSelectDecorator(ChangeEventArgs args)
    {
        decorator = (args.Value.ToString() == "source") ? connector.SourceDecorator : connector.TargetDecorator;
    }

    private void OnDecoratorShapeChange(ChangeEventArgs args)
    {
        DecoratorShapes shape = (DecoratorShapes)Enum.Parse(typeof(DecoratorShapes), args.Value.ToString());
        decorator.Shape = shape;
        StateHasChanged();
    }

    private void OnDecoratorWidthChange(ChangeEventArgs args)
    {
        decorator.Width = double.Parse(args.Value.ToString());
    }

    private void OnDecoratorHeightChange(ChangeEventArgs args)
    {
        decorator.Height = double.Parse(args.Value.ToString());
    }

    private void OnPathShapeChange(ChangeEventArgs args)
    {
        string pathData = args.Value.ToString();
        decorator.PathData = args.Value.ToString();
    }

    private void OnPivotXChange(ChangeEventArgs args)
    {
        decorator.Pivot.X = double.Parse(args.Value.ToString());
    }

    private void OnPivotYChange(ChangeEventArgs args)
    {
        decorator.Pivot.Y = double.Parse(args.Value.ToString());
    }

    string ToChangeStyle = "Connector";
    private void SelectStyleToShape(ChangeEventArgs args)
    {
        ToChangeStyle = args.Value.ToString();
    }

    private void UpdateStyle()
    {
        ShapeStyle style = new ShapeStyle() { Fill = "orange", StrokeColor = "blue", Opacity = 1 };
        if (ToChangeStyle == "Connector")
        {
            connector.Style = style;
        }
        else if(ToChangeStyle == "SourceDecorator")
        {
            connector.SourceDecorator.Style = style;
        }
        else
        {
            connector.TargetDecorator.Style = style;
        }
        StateHasChanged();
    }

    public void FillColorChange(ChangeEventArgs args)
    {
        string value = (string)args.Value;
        if (ToChangeStyle == "Connector")
        {
            connector.Style.Fill = value;
        }
        else if (ToChangeStyle == "SourceDecorator")
        {
            connector.SourceDecorator.Style.Fill = value;
        }
        else
        {
            connector.TargetDecorator.Style.Fill = value;
        }
    }

    public void StrokeColorChange(ChangeEventArgs args)
    {
        string value = (string)args.Value;
        if (ToChangeStyle == "Connector")
        {
            connector.Style.StrokeColor = value;
        }
        else if (ToChangeStyle == "SourceDecorator")
        {
            connector.SourceDecorator.Style.StrokeColor = value;
        }
        else
        {
            connector.TargetDecorator.Style.StrokeColor = value;
        }
    }

    public void StrokeDashArrayChange(ChangeEventArgs args)
    {
        string value = (string)args.Value;
        if (ToChangeStyle == "Connector")
        {
            connector.Style.StrokeDashArray = value;
        }
        else if (ToChangeStyle == "SourceDecorator")
        {
            connector.SourceDecorator.Style.StrokeDashArray = value;
        }
        else
        {
            connector.TargetDecorator.Style.StrokeDashArray = value;
        }
    }

    public void StrokeWidthChange(ChangeEventArgs args)
    {
        double value = double.Parse(args.Value.ToString());
        if (ToChangeStyle == "Connector")
        {
            connector.Style.StrokeWidth = value;
        }
        else if (ToChangeStyle == "SourceDecorator")
        {
            connector.SourceDecorator.Style.StrokeWidth = value;
        }
        else
        {
            connector.TargetDecorator.Style.StrokeWidth = value;
        }
    }

    public void OpacityChange(ChangeEventArgs args)
    {
        double value = double.Parse(args.Value.ToString());
        if (ToChangeStyle == "Connector")
        {
            connector.Style.Opacity = value;
        }
        else if (ToChangeStyle == "SourceDecorator")
        {
            connector.SourceDecorator.Style.Opacity = value;
        }
        else
        {
            connector.TargetDecorator.Style.Opacity = value;
        }
    }

    public void GradientChange(ChangeEventArgs args)
    {
        string value = args.Value.ToString();
        if (value == "linear")
        {
            connector.Style.Gradient = new LinearGradient()
            {
                Type = GradientType.Linear,
                X1 = 0,
                X2 = 50,
                Y1 = 0,
                Y2 = 50,
                Stops = new DiagramObjectCollection<GradientStop>()
                    {
                        new GradientStop(){ Color= "white", Offset=0},
                        new GradientStop(){Color ="#6BA5D7", Offset=100}
                    }
            };

        }
        else
        {
            connector.Style.Gradient = new RadialGradient()
            {
                Type = GradientType.Radial,
                Cx = 50,
                Cy = 50,
                Fx = 50,
                Fy = 50,
                Stops = new DiagramObjectCollection<GradientStop>()
                    {
                        new GradientStop(){ Color= "white", Offset=0},
                        new GradientStop(){Color ="violet", Offset=50}
                    }
            };
        }
    }

    public void LinearGradientChange(ChangeEventArgs args)
    {
        string value = args.Value.ToString();
        if (value == "linear")
        {
            LinearGradient gradient = (connector.Style.Gradient as LinearGradient);
            gradient.X1 = 10;
            gradient.X2 = 70;
            gradient.Y1 = 10;
            gradient.Y2 = 70;
            gradient.Stops[0].Color = "brown";
            gradient.Stops[0].Color = "green";
        }
        else
        {
            RadialGradientChange();
        }
    }

    public void RadialGradientChange()
    {
        RadialGradient gradient = connector.Style.Gradient as RadialGradient;
        gradient.Cx = 60; gradient.Cy = 60;
        gradient.Fx = 60; gradient.Fy = 60;
        gradient.Stops[0].Color = "red";
        gradient.Stops[0].Color = "white";
    }

    private void OnChangeConnectorType(ChangeEventArgs args)
    {
        Segments segments = (Segments)Enum.Parse(typeof(Segments), args.Value.ToString());
        connector.Type = segments;
    }

    private void OnCornerRadiusChange(ChangeEventArgs args)
    {
        connector.CornerRadius = double.Parse(args.Value.ToString());
    }

    private void RestDecorator()
    {
        connector.TargetDecorator = new Decorator { Width = 15, Height = 15, Shape = DecoratorShapes.Square };
    }

    private void OnSourcePaddingChange(ChangeEventArgs args)
    {
        connector.SourcePadding = double.Parse(args.Value.ToString());
    }

    private void OnTargetPddingChange(ChangeEventArgs args)
    {
        connector.TargetPadding = double.Parse(args.Value.ToString());
    }

    private void OnSegmentCollChange(ChangeEventArgs args)
    {
        string value = args.Value.ToString();
        if (value == "Straight")
        {
            connector.Segments = new DiagramObjectCollection<ConnectorSegment>()
            {
                new StraightSegment(){ Type = Segments.Straight, Point= new Point{X=20, Y=20} },
                new StraightSegment(){ Type = Segments.Straight, Point= new Point{X=30, Y=70} }
            };
        }
        else if (value == "Orthogonal")
        {
            connector.Segments = new DiagramObjectCollection<ConnectorSegment>()
            {
                new OrthogonalSegment(){ Type = Segments.Orthogonal, Direction = Direction.Top, Length = 50 },
                new OrthogonalSegment(){ Type = Segments.Orthogonal,  Direction = Direction.Right, Length = 40 }
            };
        }
        else
        {
            connector.Segments = new DiagramObjectCollection<ConnectorSegment>()
            {
                new BezierSegment(){ Type = Segments.Bezier, Point= new Point{X=50, Y=50} },
                new BezierSegment(){ Type = Segments.Bezier,Point= new Point{X=70, Y=40}}
            };
        }

    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
